/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AirPortAssistant.framework/AirPortAssistant
 */

#import "AirPortAssistant-Structs.h"
#import "SetupUIDelegateResult.h"
#import "AutoGuessSetup.h"
#import "BaseStationSetup.h"
#import "AssistantCallbackController.h"

@class NSMutableSet, NSDictionary, NSString;
@protocol SetupConnectionDelegate;

__attribute__((visibility("hidden")))
@interface AUSetupController : AssistantCallbackController <SetupUIDelegateResult, AutoGuessSetup, BaseStationSetup> {
	id _context;
	BOOL _autoJoinState;
	BSConfigurationContextRef _configContext;
	NSMutableSet* _setupDelegates;
	id _connectionDelegate;
	NSString* _autoGuessSetupRecommendation;
	NSDictionary* _lastInstrumentation;
}
@property(retain) NSDictionary* restoreRecommendation;
@property(assign, nonatomic) BOOL rememberWiFiPassword;
@property(assign, nonatomic) BOOL rememberBasePassword;
@property(retain, nonatomic) NSDictionary* bonjourRecord;
@property(retain, nonatomic) NSDictionary* lastInstrumentation;	// @synthesize=_lastInstrumentation
@property(retain, nonatomic) NSString* autoGuessSetupRecommendation;	// @synthesize=_autoGuessSetupRecommendation
@property(assign, nonatomic) id context;	// @synthesize=_context
@property(assign, nonatomic) id<SetupConnectionDelegate> connectionDelegate;	// @synthesize=_connectionDelegate
@property(readonly, assign, nonatomic) NSMutableSet* setupDelegates;	// @synthesize=_setupDelegates
+(id)setupController;
// declared property setter: -(void)setLastInstrumentation:(id)instrumentation;
// declared property getter: -(id)lastInstrumentation;
// declared property setter: -(void)setAutoGuessSetupRecommendation:(id)recommendation;
// declared property getter: -(id)autoGuessSetupRecommendation;
// declared property setter: -(void)setConnectionDelegate:(id)delegate;
// declared property getter: -(id)connectionDelegate;
// declared property getter: -(id)setupDelegates;
// declared property setter: -(void)setContext:(id)context;
// declared property getter: -(id)context;
-(long)setupWithTargetBaseStation:(id)targetBaseStation andSettings:(id)settings;
-(long)setupFromAutoguessRecommendation:(id)autoguessRecommendation withOptions:(id)options;
-(void)setupConnectionStatusUpdatedResult:(long)result withOptions:(id)options;
-(BaseStation*)bsRef;
-(BOOL)dirty;
// declared property setter: -(void)setBonjourRecord:(id)record;
// declared property getter: -(id)bonjourRecord;
// declared property setter: -(void)setRememberWiFiPassword:(BOOL)password;
// declared property getter: -(BOOL)rememberWiFiPassword;
// declared property setter: -(void)setRememberBasePassword:(BOOL)password;
// declared property getter: -(BOOL)rememberBasePassword;
-(BOOL)isMonitoring;
-(long)setMonitorForChanges:(BOOL)changes;
-(long)taskArchiveDiskAsync:(id)async;
-(long)taskEraseDiskAsync:(id)async;
-(long)taskUploadFirmwareAsync:(id)async;
-(long)taskRestoreDefaultsAsync:(BOOL)async;
-(long)taskRestartAsync;
-(int)taskState;
-(long)rpcWPSAllowClientAsync:(id)async;
-(long)rpcWPSStopAsync;
-(long)rpcWPSStartAsync:(BOOL)async dayPass:(BOOL)pass;
-(long)rpcRenewDHCPLeaseAsync;
-(long)rpcDisconnectAllDiskUsersWithMessageAsync:(id)messageAsync;
-(long)rpcRefreshBSSettingAsync:(int)async;
-(long)rpcSystemInterfacesAsync;
-(long)removeKeychainBasePassword;
-(long)updateKeychainWithPasswords;
-(long)updateSettingsAsync;
-(long)readPropertyListFromBaseAsync:(id)baseAsync;
-(long)readAllPropertiesFromBaseAsync;
-(id)validateAndGetErrors;
-(long)unignoredProblemCount;
-(int)stateForProblem:(unsigned)problem;
-(BOOL)hasACPFeature:(unsigned)feature;
-(long)getValue:(id*)value forSettingPath:(id)settingPath;
-(long)setValue:(id)value forSettingPath:(id)settingPath;
-(long)getValue:(id*)value forBSSetting:(int)bssetting;
-(long)setValue:(id)value forBSSetting:(int)bssetting;
-(long)cancelSetup;
-(long)subclassAssistantCallback:(AssistantCallbackContext*)callback;
-(void)dealloc;
-(id)init;
-(id)targetBaseInfoDict;
-(void)handleSetupComplete;
-(id)bestKeychainMACAddress;
@end

