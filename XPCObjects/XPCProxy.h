/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/XPCObjects.framework/XPCObjects
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "NSCopying.h"
#import "XPCObjects-Structs.h"

@class Protocol, NSArray, NSObject;
@protocol OS_xpc_object, OS_dispatch_queue, XPCProxyTarget;

@interface XPCProxy : XXUnknownSuperclass <NSCopying> {
	NSObject<OS_xpc_object>* _connection;
	NSObject<OS_dispatch_queue>* _queue;
	id<XPCProxyTarget> _target;
	Class _remoteClass;
	Protocol* _remoteProtocol;
	id _errorHandler;
	BOOL _invalidated;
	BOOL _useTraditionalEncoder;
	NSArray* _whitelistedClassNames;
}
@property(assign) Class remoteClass;	// @synthesize=_remoteClass
@property(assign) id<XPCProxyTarget> target;	// @synthesize=_target
@property(assign, nonatomic) BOOL useTraditionalEncoder;	// @synthesize=_useTraditionalEncoder
@property(readonly, assign, nonatomic) NSObject<OS_xpc_object>* connection;	// @synthesize=_connection
@property(copy) id errorHandler;	// @synthesize=_errorHandler
@property(assign) Protocol* remoteProtocol;	// @synthesize=_remoteProtocol
+(void)initialize;
// declared property setter: -(void)setUseTraditionalEncoder:(BOOL)encoder;
// declared property getter: -(BOOL)useTraditionalEncoder;
// declared property getter: -(id)connection;
// declared property setter: -(void)setRemoteProtocol:(id)protocol;
// declared property getter: -(id)remoteProtocol;
// declared property setter: -(void)setRemoteClass:(Class)aClass;
// declared property getter: -(Class)remoteClass;
// declared property setter: -(void)setTarget:(id)target;
// declared property getter: -(id)target;
// declared property setter: -(void)setErrorHandler:(id)handler;
// declared property getter: -(id)errorHandler;
-(id)copyWithZone:(NSZone*)zone;
-(id)_proxyDescription;
-(id)_errorForXpcError:(id)xpcError;
-(id)_objectForXpcEncoding:(id)xpcEncoding;
-(id)_newXpcEncodingForObject:(id)object;
-(void)_getInvocationArgument:(void*)argument argumentType:(const char*)type class:(Class*)aClass forXpcArgument:(id)xpcArgument message:(id)message;
-(id)_newXpcArgumentForInvocationArgumentAt:(void*)at ofType:(const char*)type;
-(id)_newMessageAndReplyHandler:(id*)handler forInvocation:(id)invocation;
-(id)_invocationForMessage:(id)message;
-(SEL)_selectorForMessage:(id)message;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)invalidate;
-(void)dealloc;
-(void)restrictDecodingToWhitelistedClassNames:(id)whitelistedClassNames;
-(id)initWithConnection:(id)connection queue:(id)queue target:(id)target;
@end

