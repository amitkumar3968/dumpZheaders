/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/iLifeSlideshow.framework/iLifeSlideshow
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "iLifeSlideshow-Structs.h"

@class MRImageManager, MRShader, NSMutableDictionary, EAGLContext, MRContextState, MRImage;
@protocol MZMediaManagement;

@interface MRContext : XXUnknownSuperclass {
	MRContext* mBaseContext;
	EAGLContext* mGLContext;
	CGPoint mPixelOffset;
	CGSize mPixelSize;
	int mVRAM;
	int mMaxTextureSize;
	float mFieldOfViewFactor;
	float mProjectionMatrix[16];
	int mOrientation;
	id<MZMediaManagement> mAssetManager;
	MRImageManager* mImageManager;
	BOOL mIsLocalContext;
	BOOL mIsFlipped;
	BOOL mIsUsingIntelGPU;
	BOOL mIsUsingIntelGMA950;
	BOOL mPrefersSharedVRAM;
	BOOL mYUVTextureUsesYUVBorderColor;
	MRContextState* mOuterState;
	MRContextState* mInnerState;
	NSMutableDictionary* mVertexAttributes;
	BOOL mCurrentVBOWasUpdated;
	BOOL mForceShaderUpdate;
	float mLocalAspectRatio;
	int mScissorRect[4];
	MRShader* mCurrentShader;
	MRImage* mTextureUnitImages[4];
	int mActiveTextureUnit;
	int mRenderBuffer;
	MRImage* mBlackImage;
	int _dimensionalMode;
}
@property(assign, nonatomic) int dimensionalMode;	// @synthesize=_dimensionalMode
@property(readonly, assign, nonatomic) const float* projectionMatrix;
@property(readonly, assign, nonatomic) const float* modelViewMatrix;
@property(readonly, assign, nonatomic) const float* backColor;
@property(readonly, assign, nonatomic) BOOL foreColorIsOpaqueWhite;
@property(readonly, assign, nonatomic) const float* foreColor;
@property(readonly, assign, nonatomic) unsigned long maxDimension;
@property(readonly, assign, nonatomic) BOOL isDoubleBuffered;
@property(assign, nonatomic) BOOL isFlipped;	// @synthesize=mIsFlipped
@property(readonly, assign, nonatomic) BOOL prefersSharedVRAM;	// @synthesize=mPrefersSharedVRAM
@property(readonly, assign, nonatomic) BOOL isUsingIntelGMA950;	// @synthesize=mIsUsingIntelGMA950
@property(readonly, assign, nonatomic) BOOL isUsingIntelGPU;	// @synthesize=mIsUsingIntelGPU
@property(readonly, assign) int maxTextureSize;	// @synthesize=mMaxTextureSize
@property(readonly, assign, nonatomic) int vram;	// @synthesize=mVRAM
@property(assign, nonatomic) float localAspectRatio;	// @synthesize=mLocalAspectRatio
@property(assign, nonatomic) int orientation;	// @synthesize=mOrientation
@property(readonly, assign, nonatomic) float aspectRatio;
@property(readonly, assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGSize pixelSize;	// @synthesize=mPixelSize
@property(assign, nonatomic) CGPoint pixelOffset;	// @synthesize=mPixelOffset
@property(readonly, assign, nonatomic) unsigned virtualScreen;
@property(readonly, assign) CGColorSpaceRef monochromaticColorSpace;
@property(readonly, assign) CGColorSpaceRef colorSpace;
@property(readonly, assign) MRImageManager* imageManager;	// @synthesize=mImageManager
@property(retain) id<MZMediaManagement> assetManager;	// @synthesize=mAssetManager
@property(readonly, assign) EAGLContext* glContext;	// @synthesize=mGLContext
@property(readonly, assign) MRContext* baseContext;	// @synthesize=mBaseContext
// declared property getter: -(int)dimensionalMode;
// declared property getter: -(int)maxTextureSize;
// declared property getter: -(int)vram;
// declared property getter: -(id)glContext;
// declared property getter: -(BOOL)prefersSharedVRAM;
// declared property getter: -(BOOL)isUsingIntelGMA950;
// declared property getter: -(BOOL)isUsingIntelGPU;
// declared property getter: -(BOOL)isFlipped;
// declared property setter: -(void)setOrientation:(int)orientation;
// declared property getter: -(int)orientation;
// declared property setter: -(void)setLocalAspectRatio:(float)ratio;
// declared property getter: -(float)localAspectRatio;
// declared property setter: -(void)setPixelSize:(CGSize)size;
// declared property getter: -(CGSize)pixelSize;
// declared property setter: -(void)setPixelOffset:(CGPoint)offset;
// declared property getter: -(CGPoint)pixelOffset;
// declared property getter: -(id)imageManager;
// declared property setter: -(void)setAssetManager:(id)manager;
// declared property getter: -(id)assetManager;
// declared property getter: -(id)baseContext;
-(BOOL)supportsMirroredRepeatForImage:(id)image;
-(void)drawLinesFromOffset:(unsigned)offset count:(unsigned)count;
-(void)drawTrianglesFromOffset:(unsigned)offset count:(unsigned)count;
-(void)drawTriangleStripFromOffset:(unsigned)offset count:(unsigned)count;
-(void)uploadBuffer:(void*)buffer withSize:(int)size toVertexBuffer2D:(unsigned)vertexBuffer2D;
-(void)deleteVBO:(unsigned)vbo;
-(unsigned)createVBO;
-(void)unsetVertexAttributePointerForKey:(id)key;
-(void)unsetInSpriteCoordinatesPointer;
-(void)unsetTextureCoordinatesPointerOnTextureUnit:(unsigned)unit;
-(void)unsetColorsPointer;
-(void)unsetNormalsPointer;
-(void)unsetVertexPointer;
-(void)setVertexAttributePointer:(const float*)pointer ofSize:(unsigned)size forKey:(id)key;
-(void)setInSpriteCoordinatesPointer:(const float*)spriteCoordinatesPointer;
-(void)setTextureCoordinatesPointer:(const float*)pointer onTextureUnit:(unsigned)unit;
-(void)setColorsPointer:(const float*)pointer;
-(void)setNormalsPointer:(const float*)pointer;
-(void)setVertex3DPointer:(const float*)pointer;
-(void)setVertex2DPointer:(const float*)pointer;
-(void)setVertexBuffer2D:(unsigned)d withFeatures:(unsigned)features;
-(void)setVertexBuffer2D:(unsigned)d withStride:(unsigned)stride inSpriteCoordinatesOffset:(unsigned)spriteCoordinatesOffset texture0CoordinatesOffset:(unsigned)offset;
-(void)setTextureMatrix:(float [16])matrix onTextureUnit:(unsigned)unit;
-(void)setNormal:(float)normal :(float)arg2 :(float)arg3;
-(void)restoreModelViewMatrix:(float [16])matrix;
-(void)translateModelViewMatrixByX:(float)x Y:(float)y Z:(float)z saveTo:(float*)to;
-(void)composeModelViewMatrix:(float [16])matrix saveTo:(float*)to;
-(void)setModelViewMatrix:(float [16])matrix saveTo:(float*)to;
// declared property getter: -(const float*)modelViewMatrix;
// declared property getter: -(const float*)projectionMatrix;
-(void)setShaderUniformMat4:(float [16])a4 forKey:(id)key;
-(void)setShaderUniformMat3:(float [16])a3 forKey:(id)key;
-(void)setShaderUniformVec4:(float)a4 :(float)arg2 :(float)arg3 :(float)arg4 forKey:(id)key;
-(void)setShaderUniformVec3:(float)a3 :(float)arg2 :(float)arg3 forKey:(id)key;
-(void)setShaderUniformVec2:(float)a2 :(float)arg2 forKey:(id)key;
-(void)setShaderUniformFloat:(float)aFloat forKey:(id)key;
-(void)setShaderUniformInt:(int)int forKey:(id)key;
-(void)unsetShader;
-(void)setShader:(id)shader;
-(void)_commitOuterToInner;
-(BOOL)commitShaderChange;
-(void)_updateTextureOnUnit:(unsigned)unit;
-(id)imageSetOnTextureUnit:(unsigned)unit;
-(void)unsetImage:(id)image onTextureUnit:(unsigned)unit state:(const XXStruct_S04vsC*)state;
-(void)setImage:(id)image onTextureUnit:(unsigned)unit withReferenceAspectRatio:(float)referenceAspectRatio state:(XXStruct_S04vsC*)state;
-(void)restoreBackColor:(const float*)color;
-(void)setBackColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float*)to;
-(void)setBackColor:(const float*)color saveTo:(float*)to;
// declared property getter: -(const float*)backColor;
-(void)restoreForeColor:(const float*)color;
-(void)composeForeColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float*)to;
-(void)composeForeColor:(const float*)color saveTo:(float*)to;
-(void)setForeColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float*)to;
-(void)setForeColor:(const float*)color saveTo:(float*)to;
// declared property getter: -(BOOL)foreColorIsOpaqueWhite;
// declared property getter: -(const float*)foreColor;
-(void)restoreScissorRect:(const int*)rect;
-(void)setScissorRect:(const int*)rect saveTo:(int*)to;
-(void)clear:(int)clear;
-(void)depthTest:(BOOL)test;
-(void)cull:(int)cull;
-(void)blend:(int)blend;
// declared property setter: -(void)setIsFlipped:(BOOL)flipped;
-(id)retainedByUserBlackImage;
-(id)retainedByUserImageByEndingLocalContext:(id)context andRestoreState:(const XXStruct_vue6hD*)state;
-(id)beginLocalContextWithSize:(CGSize)size backgroundColor:(const float*)color state:(XXStruct_vue6hD*)state;
-(void)purgeResources:(BOOL)resources;
-(void)flush;
// declared property getter: -(unsigned long)maxDimension;
// declared property getter: -(unsigned)virtualScreen;
// declared property getter: -(BOOL)isDoubleBuffered;
// declared property getter: -(CGColorSpaceRef)monochromaticColorSpace;
// declared property getter: -(CGColorSpaceRef)colorSpace;
// declared property getter: -(float)aspectRatio;
// declared property getter: -(CGSize)size;
// declared property setter: -(void)setDimensionalMode:(int)mode;
-(void)updateGeometry;
-(void)unlock;
-(void)lock;
-(void)cleanup;
-(void)finalize;
-(void)dealloc;
-(id)initLocalWithContext:(id)context glContext:(id)context2 andSize:(CGSize)size;
-(id)initWithEAGLContext:(id)eaglcontext andAssetManager:(id)manager;
@end

