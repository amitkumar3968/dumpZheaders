/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/iLifeSlideshow.framework/iLifeSlideshow
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "iLifeSlideshow-Structs.h"

@class MRImageManager, NSDictionary, NSMutableDictionary, NSString, EAGLContext, MRTexture;

@interface MRImage : XXUnknownSuperclass {
	MRImageManager* mImageManager;
	unsigned long mWidth;
	unsigned long mHeight;
	MRImage* mRefImage;
	NSString* mImageBufferKey;
	MRTexture* mTexture;
	unsigned long mPixelFormat;
	float mCenterX;
	float mCenterY;
	float mScale;
	float mRotationAngle;
	NSString* mFilterID;
	NSDictionary* mShader;
	int mClampMode;
	double mSourceTimeStamp;
	double mRenderTime;
	int mRetainByUserCount;
	float mColor[4];
	IOSurfaceRef mIOSurface;
	CVBufferRef mCVPixelBuffer;
	CGContextRef mCGContext;
	CGColorSpaceRef mColorspace;
	void* mDatas[3];
	unsigned long mDataSize;
	unsigned long mDataRowBytes;
	unsigned long mDataWidth;
	unsigned long mDataHeight;
	unsigned char mOrientation;
	NSMutableDictionary* mUserData;
	CVBufferRef mCVTexture;
	unsigned long mFlags;
}
@property(readonly, assign) MRTexture* textureIfExists;
@property(readonly, assign) MRTexture* texture;
@property(readonly, assign) NSString* imageBufferKey;
@property(assign, nonatomic) BOOL mipmapFiltersNearest;
@property(readonly, assign) BOOL usesMipmapping;
@property(assign, nonatomic) BOOL hasKenBurns;
@property(readonly, assign, nonatomic) BOOL isEmpty;
@property(readonly, assign, nonatomic) float aspectRatio;
@property(readonly, assign) NSMutableDictionary* userData;
@property(readonly, assign, nonatomic) BOOL isOpaque;
@property(assign, nonatomic) BOOL preservesAspectRatio;
@property(assign, nonatomic) BOOL filtersNearest;
@property(readonly, assign, nonatomic) BOOL isPremultiplied;
@property(assign, nonatomic) BOOL usesBackgroundColorAsBorderColor;
@property(assign, nonatomic) double renderTime;	// @synthesize=mRenderTime
@property(assign, nonatomic) double sourceTimeStamp;	// @synthesize=mSourceTimeStamp
@property(readonly, assign, nonatomic) BOOL hasKBOrShader;
@property(assign, nonatomic) int clampMode;	// @synthesize=mClampMode
@property(retain) NSDictionary* shader;	// @synthesize=mShader
@property(copy, nonatomic) NSString* filterID;	// @synthesize=mFilterID
@property(assign, nonatomic) float rotationAngle;	// @synthesize=mRotationAngle
@property(assign, nonatomic) float scale;	// @synthesize=mScale
@property(assign, nonatomic) float centerY;	// @synthesize=mCenterY
@property(assign, nonatomic) float centerX;	// @synthesize=mCenterX
@property(readonly, assign, nonatomic) EAGLContext* updateGLContext;
@property(readonly, assign, nonatomic) unsigned textureTarget;
@property(readonly, assign, nonatomic) unsigned textureName;
@property(readonly, assign, nonatomic) BOOL isYUV;
@property(readonly, assign, nonatomic) BOOL isMonochromatic;
@property(readonly, assign, nonatomic) unsigned long pixelFormat;	// @synthesize=mPixelFormat
@property(readonly, assign, nonatomic) unsigned long height;	// @synthesize=mHeight
@property(readonly, assign, nonatomic) unsigned long width;	// @synthesize=mWidth
@property(readonly, assign) MRImageManager* imageManager;	// @synthesize=mImageManager
// declared property setter: -(void)setClampMode:(int)mode;
// declared property getter: -(int)clampMode;
// declared property setter: -(void)setRenderTime:(double)time;
// declared property getter: -(double)renderTime;
// declared property setter: -(void)setSourceTimeStamp:(double)stamp;
// declared property getter: -(double)sourceTimeStamp;
// declared property setter: -(void)setShader:(id)shader;
// declared property getter: -(id)shader;
// declared property setter: -(void)setFilterID:(id)anId;
// declared property setter: -(void)setRotationAngle:(float)angle;
// declared property getter: -(float)rotationAngle;
// declared property setter: -(void)setScale:(float)scale;
// declared property getter: -(float)scale;
// declared property setter: -(void)setCenterY:(float)y;
// declared property getter: -(float)centerY;
// declared property setter: -(void)setCenterX:(float)x;
// declared property getter: -(float)centerX;
// declared property getter: -(unsigned long)pixelFormat;
// declared property getter: -(unsigned long)height;
// declared property getter: -(unsigned long)width;
// declared property getter: -(id)imageManager;
-(void)uploadCGImage:(CGImageRef)image toTextureRect:(CGRect)textureRect;
-(void)addOverlayForROI:(id)roi;
// declared property getter: -(id)textureIfExists;
// declared property getter: -(id)updateGLContext;
// declared property getter: -(unsigned)textureTarget;
// declared property getter: -(unsigned)textureName;
// declared property getter: -(id)texture;
// declared property getter: -(BOOL)isYUV;
// declared property getter: -(BOOL)hasKBOrShader;
// declared property getter: -(id)filterID;
-(CGSize)relativeSizeInContextPixelSize:(CGSize)contextPixelSize;
-(void)unsetOnContext:(id)context onTextureUnit:(unsigned)unit state:(const XXStruct_S04vsC*)state;
-(void)setOnContext:(id)context onTextureUnit:(unsigned)unit withReferenceAspectRatio:(float)referenceAspectRatio state:(XXStruct_S04vsC*)state;
-(void)getMatrix:(float [16])matrix forReferenceAspectRatio:(float)referenceAspectRatio;
-(void)kenburnsMatrix:(float [16])matrix forReferenceAspectRatio:(float)referenceAspectRatio;
// declared property getter: -(BOOL)isEmpty;
// declared property getter: -(float)aspectRatio;
// declared property getter: -(id)userData;
// declared property getter: -(id)imageBufferKey;
// declared property setter: -(void)setHasKenBurns:(BOOL)burns;
// declared property getter: -(BOOL)hasKenBurns;
// declared property setter: -(void)setPreservesAspectRatio:(BOOL)ratio;
// declared property getter: -(BOOL)preservesAspectRatio;
// declared property setter: -(void)setMipmapFiltersNearest:(BOOL)nearest;
// declared property getter: -(BOOL)mipmapFiltersNearest;
-(void)generateMipmap;
// declared property getter: -(BOOL)usesMipmapping;
// declared property getter: -(BOOL)isOpaque;
// declared property setter: -(void)setFiltersNearest:(BOOL)nearest;
// declared property getter: -(BOOL)filtersNearest;
// declared property getter: -(BOOL)isMonochromatic;
// declared property getter: -(BOOL)isPremultiplied;
// declared property setter: -(void)setUsesBackgroundColorAsBorderColor:(BOOL)color;
// declared property getter: -(BOOL)usesBackgroundColorAsBorderColor;
-(id)retainedByUserImageWithShader:(id)shader;
-(id)retainedByUserImage;
-(void)removingFromCollection;
-(id)insertingInCollection;
-(void)releaseByUser;
-(id)retainByUser;
-(void)cleanup;
-(void)finalize;
-(void)dealloc;
-(id)initWithCGContext:(CGContextRef)cgcontext imageManager:(id)manager;
-(id)initWithCGContext:(CGContextRef)cgcontext size:(CGSize)size imageManager:(id)manager;
-(id)initWithCVTexture:(CVBufferRef)cvtexture size:(CGSize)size orientation:(int)orientation imageManager:(id)manager monochromatic:(BOOL)monochromatic;
-(id)initWithCVPixelBuffer:(CVBufferRef)cvpixelBuffer size:(CGSize)size orientation:(int)orientation imageManager:(id)manager monochromatic:(BOOL)monochromatic;
-(id)initWithCVPixelBuffer:(CVBufferRef)cvpixelBuffer size:(CGSize)size orientation:(int)orientation imageBufferKey:(id)key imageManager:(id)manager monochromatic:(BOOL)monochromatic;
-(id)initWithCGImage:(CGImageRef)cgimage textureSize:(CGSize)size orientation:(int)orientation imageManager:(id)manager monochromatic:(BOOL)monochromatic;
-(id)initWithCGImage:(CGImageRef)cgimage textureSize:(CGSize)size orientation:(int)orientation imageBufferKey:(id)key imageManager:(id)manager monochromatic:(BOOL)monochromatic;
-(id)initWithIOSurface:(IOSurfaceRef)iosurface imageManager:(id)manager;
-(id)initWithIOSurface:(IOSurfaceRef)iosurface imageBufferKey:(id)key imageManager:(id)manager;
-(id)initWithIOSurface:(IOSurfaceRef)iosurface size:(CGSize)size orientation:(int)orientation imageManager:(id)manager;
-(id)initWithIOSurface:(IOSurfaceRef)iosurface size:(CGSize)size orientation:(int)orientation imageBufferKey:(id)key imageManager:(id)manager;
-(id)initWithImage:(id)image;
-(id)initWithTexture:(id)texture;
-(id)initWithSize:(CGSize)size andColor:(const float*)color imageBufferKey:(id)key imageManager:(id)manager options:(id)options;
-(id)init;
@end

