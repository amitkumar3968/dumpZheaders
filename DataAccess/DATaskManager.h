/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableArray, NSTimer, NSArray, NSMutableSet, DAAccount;
@protocol DATask;

@interface DATaskManager : XXUnknownSuperclass {
	DAAccount* _account;
@private
	NSMutableArray* _queuedExclusiveTasks;
	id<DATask> _activeExclusiveTask;
	NSMutableSet* _independentTasks;
	NSMutableSet* _heldIndependentTasks;
	NSMutableSet* _modalHeldIndependentTasks;
	NSMutableArray* _queuedTasks;
	id<DATask> _activeQueuedTask;
	id<DATask> _modalHeldActiveQueuedTask;
	NSMutableArray* _queuedModalTasks;
	id<DATask> _activeModalTask;
	int _state;
	NSTimer* _managerIdleTimer;
}
@property(readonly, assign) NSArray* allTasks;
@property(readonly, assign) NSArray* queuedTasks;	// @synthesize=_queuedTasks
@property(readonly, assign) id<DATask> activeQueuedTask;	// @synthesize=_activeQueuedTask
@property(readonly, assign) id<DATask> activeModalTask;	// @synthesize=_activeModalTask
@property(assign) DAAccount* account;	// @synthesize=_account
// declared property getter: -(id)queuedTasks;
// declared property getter: -(id)activeQueuedTask;
-(void)taskManagerWillRemoveTask:(id)taskManager;
-(void)taskManagerDidAddTask:(id)taskManager;
-(id)_getQueuedModalTasks;
-(id)_getQueuedTasks;
-(id)_getModalHeldIndependentTasks;
-(id)_getHeldIndependentTasks;
-(id)_getIndependentTasks;
-(id)_getQueuedExclusiveTasks;
-(void)_releasePowerAssertionForTask:(id)task;
-(void)_retainPowerAssertionForTask:(id)task;
-(void)_cancelTasksWithReason:(int)reason;
-(void)_scheduleStartModal:(id)modal;
-(void)_schedulePerformTask:(id)task;
-(void)_scheduleSelector:(SEL)selector withArgument:(id)argument;
-(void)_makeStateTransition;
-(void)_reactivateHeldTasks;
-(void)_startModal:(id)modal;
-(void)_requestCancelTasksWithReason:(int)reason;
-(void)_performTask:(id)task;
-(BOOL)taskIsModal:(id)modal;
-(void)taskEndModal:(id)modal;
-(void)taskRequestModal:(id)modal;
-(void)taskDidFinish:(id)task;
-(BOOL)_hasTasksForcingNetworkConnection;
-(BOOL)_taskInQueueForcesNetworkConnection:(id)queueForcesNetworkConnection;
-(BOOL)_taskForcesNetworking:(id)networking;
-(void)_useOpportunisticSocketsAgain;
-(id)stateString;
-(void)shutdown;
-(void)cancelAllTasks;
-(void)cancelTask:(id)task;
-(void)cancelTask:(id)task withUnderlyingError:(id)underlyingError;
-(void)submitQueuedTask:(id)task;
-(void)submitIndependentTask:(id)task;
-(void)submitExclusiveTask:(id)task toFrontOfQueue:(BOOL)queue;
-(void)submitExclusiveTask:(id)task;
-(id)accountPersistentUUID;
-(id)accountID;
-(id)scheme;
-(id)identityPersist;
-(BOOL)useSSL;
-(id)password;
-(id)server;
-(int)port;
-(id)user;
// declared property setter: -(void)setAccount:(id)account;
// declared property getter: -(id)account;
-(id)userAgent;
-(id)deviceType;
-(BOOL)_useFakeDescriptions;
-(id)_version;
-(void)_populateVersionDescriptions;
-(void)dealloc;
-(id)init;
-(id)initWithAccount:(id)account;
// declared property getter: -(id)activeModalTask;
// declared property getter: -(id)allTasks;
@end

