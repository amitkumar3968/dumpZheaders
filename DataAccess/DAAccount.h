/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "AccountCreationProtocol.h"
#import "DataAccess-Structs.h"
#import "BasicAccountSyncing.h"
#import "AccountFullAccountProtocol.h"

@class ACAccount, NSMutableDictionary, DAStatusReport, NSString, NSData, NSURL, NSArray, DASettingsTemplate;

@interface DAAccount : XXUnknownSuperclass <AccountFullAccountProtocol, AccountCreationProtocol, BasicAccountSyncing> {
	ACAccount* _backingAccountInfo;
	int _dataclasses;
	BOOL _requiresAccountDeleteAndReAdd;
	BOOL _hasInitted;
	BOOL _shouldPromptForPassword;
	BOOL _shouldFailAllTasks;
	BOOL _shouldUseOpportunisticSockets;
	NSMutableDictionary* _haveWarnedAboutCertDict;
	DASettingsTemplate* _settingsTemplate;
	DAStatusReport* _statusReport;
	CFDictionaryRef _consumers;
	CFURLStorageSessionRef _storageSession;
}
@property(readonly, assign) DAStatusReport* statusReport;	// @synthesize=_statusReport
@property(assign) BOOL shouldUseOpportunisticSockets;	// @synthesize=_shouldUseOpportunisticSockets
@property(readonly, assign) NSData* identityPersist;
@property(assign, nonatomic) BOOL shouldFailAllTasks;	// @synthesize=_shouldFailAllTasks
@property(readonly, assign) NSArray* appIdsForPasswordPrompt;
@property(assign) BOOL shouldPromptForPassword;	// @synthesize=_shouldPromptForPassword
@property(copy) NSArray* emailAddresses;
@property(copy) NSString* emailAddress;
@property(retain) DASettingsTemplate* settingsTemplate;	// @synthesize=_settingsTemplate
@property(copy) NSURL* principalURL;
@property(assign) BOOL shouldAutodiscoverPrincipalURL;
@property(copy) NSString* scheme;
@property(retain) NSData* encryptionIdentityPersistentReference;
@property(retain) NSData* signingIdentityPersistentReference;
@property(readonly, assign, nonatomic) NSString* scheduleIdentifier;
@property(readonly, assign) int keychainAccessibilityType;
@property(assign) BOOL needsRediscovery;
@property(readonly, assign) ACAccount* backingAccountInfo;	// @synthesize=_backingAccountInfo
@property(readonly, assign) BOOL isChildAccount;
@property(readonly, assign) int enabledDataclassesBitmask;	// @synthesize=_dataclasses
@property(assign) BOOL useSSL;
@property(copy) NSString* password;
@property(assign) int port;
@property(copy) NSString* host;
@property(copy) NSString* user;
@property(copy) NSString* username;
@property(copy) NSString* accountDescription;
@property(readonly, assign) NSString* persistentUUID;
@property(assign, setter=setDAAccountVersion:) int daAccountVersion;
@property(readonly, assign) ACAccount* backingCredentialAccount;
@property(retain) id version;	// converted property
@property(assign) int toDosNumberOfPastDaysToSync;	// converted property
@property(readonly, assign) BOOL requiresAccountDeleteAndReAdd;	// converted property
+(id)newAccountOfAccountType:(id)accountType;
+(Class)classForAccountType:(id)accountType;
+(id)defaultProperties;
+(Class)daemonClass;
+(Class)clientClass;
+(Class)accountClass;
// declared property setter: -(void)setShouldUseOpportunisticSockets:(BOOL)useOpportunisticSockets;
// declared property getter: -(BOOL)shouldUseOpportunisticSockets;
// declared property setter: -(void)setShouldFailAllTasks:(BOOL)failAllTasks;
// declared property getter: -(id)statusReport;
// declared property setter: -(void)setSettingsTemplate:(id)aTemplate;
// declared property getter: -(id)settingsTemplate;
// declared property getter: -(id)backingAccountInfo;
// declared property setter: -(void)setShouldPromptForPassword:(BOOL)promptForPassword;
// declared property getter: -(BOOL)shouldPromptForPassword;
// declared property getter: -(int)enabledDataclassesBitmask;
-(BOOL)upgradeToAccountsdWithStore:(id)store parentAccount:(id)account;
-(id)backingACAccountTypeIdentifier;
-(void)upgradeAccountSpecificPropertiesOnAccount:(id)account inStore:(id)store parentAccount:(id)account3;
-(void)upgradeToHoodooAccountInfo;
-(BOOL)upgradeAccount;
-(BOOL)_upgradeSelfFromPreKirkwood;
-(void)_removeHostsToTrust;
-(BOOL)accountNeedsUpgrade;
// declared property setter: -(void)setDAAccountVersion:(int)version;
// declared property getter: -(int)daAccountVersion;
-(void)saveAccountSettings;
-(void)saveChildAccountSettingsWithAccountsManager:(id)accountsManager;
// declared property getter: -(id)appIdsForPasswordPrompt;
-(id)urlForKeychain;
// declared property setter: -(void)setUser:(id)user;
// declared property getter: -(id)user;
-(id)description;
-(BOOL)usesLegacyAccountSettings;
-(CFURLStorageSessionRef)copyStorageSession;
-(BOOL)childKeyIsSharedForWriting:(id)writing;
-(BOOL)childKeyIsSharedForReading:(id)reading;
-(BOOL)isHotmailAccount;
-(BOOL)isCalDAVChildAccount;
-(BOOL)isCardDAVAccount;
-(BOOL)isDAMMeAccount;
-(BOOL)isCalDAVAccount;
-(BOOL)isLDAPAccount;
-(BOOL)isActiveSyncAccount;
-(BOOL)isEqualToAccount:(id)account;
// declared property getter: -(BOOL)shouldFailAllTasks;
-(void)resetStatusReport;
-(BOOL)resetCertWarnings;
-(void)setHaveWarnedAboutCert:(id)cert forHost:(id)host;
-(BOOL)haveWarnedAboutCert:(id)cert forHost:(id)host;
// declared property getter: -(BOOL)isChildAccount;
-(void)cleanupAccountFiles;
-(void)setExceptions:(CFDataRef)exceptions forDigest:(id)digest;
-(CFDataRef)exceptionsForDigest:(id)digest;
-(id)_exceptionsDict;
-(BOOL)_isIdentityManagedByProfile;
-(void)setIdentityCertificatePersistentID:(id)anId managedByProfile:(BOOL)profile;
// declared property getter: -(id)identityPersist;
-(id)addUsernameToURL:(id)url;
// declared property getter: -(int)keychainAccessibilityType;
-(void)saveAccountProperties;
-(void)prepareForAccountSave;
-(void)removeClientCertificateData;
-(id)defaultContainerIdentifierForDADataclass:(int)dadataclass;
-(void)stopMonitoringFolders;
-(void)stopMonitoringFoldersWithIDs:(id)ids;
-(BOOL)monitorFolderWithID:(id)anId;
-(BOOL)monitorFoldersWithIDs:(id)ids;
-(void)tearDown;
// converted property getter: -(BOOL)requiresAccountDeleteAndReAdd;
// declared property setter: -(void)setNeedsRediscovery:(BOOL)rediscovery;
// declared property getter: -(BOOL)needsRediscovery;
// declared property setter: -(void)setShouldAutodiscoverPrincipalURL:(BOOL)autodiscoverPrincipalURL;
// declared property getter: -(BOOL)shouldAutodiscoverPrincipalURL;
-(BOOL)autodiscoverAccountConfigurationWithConsumer:(id)consumer;
-(void)checkValidityWithConsumer:(id)consumer;
// declared property setter: -(void)setPrincipalURL:(id)url;
// declared property getter: -(id)principalURL;
// declared property setter: -(void)setScheme:(id)scheme;
// declared property getter: -(id)scheme;
// declared property setter: -(void)setPort:(int)port;
// declared property getter: -(int)port;
-(oneway void)setEncryptionIdentityPersistentReference:(id)reference;
// declared property getter: -(id)encryptionIdentityPersistentReference;
-(oneway void)setSigningIdentityPersistentReference:(id)reference;
// declared property getter: -(id)signingIdentityPersistentReference;
-(BOOL)accountContainsEmailAddress:(id)address;
// declared property setter: -(void)setEmailAddresses:(id)addresses;
// declared property getter: -(id)emailAddresses;
// declared property setter: -(void)setEmailAddress:(id)address;
// declared property getter: -(id)emailAddress;
// declared property setter: -(void)setUseSSL:(BOOL)ssl;
// declared property getter: -(BOOL)useSSL;
// declared property setter: -(void)setHost:(id)host;
// declared property getter: -(id)host;
-(id)domainOnly;
-(id)usernameWithoutDomain;
// converted property setter: -(void)setVersion:(id)version;
// converted property getter: -(id)version;
// declared property setter: -(void)setPassword:(id)password;
-(void)setPassword:(id)password withAccessibility:(int)accessibility;
// declared property getter: -(id)password;
-(id)passwordWithExpected:(BOOL)expected;
-(void)removeConsumerForTask:(id)task;
-(id)consumerForTask:(id)task;
-(void)setConsumer:(id)consumer forTask:(id)task;
-(id)stateString;
-(void)stopMonitoringFolderWithID:(id)anId;
-(void)suspendMonitoringFoldersWithIDs:(id)ids;
-(void)resumeMonitoringFoldersWithIDs:(id)ids;
-(void)setAccountIntProperty:(int)property forKey:(id)key;
-(int)accountIntPropertyForKey:(id)key;
-(void)setAccountBoolProperty:(BOOL)property forKey:(id)key;
-(BOOL)accountBoolPropertyForKey:(id)key;
-(void)removeAccountPropertyForKey:(id)key;
-(void)setAccountProperty:(id)property forKey:(id)key;
-(id)accountPropertyForKey:(id)key;
-(id)spinnerIdentifiers;
-(id)dataclassProperties;
-(void)setEnabled:(BOOL)enabled forDADataclass:(int)dadataclass;
-(BOOL)isEnabledForDataclass:(id)dataclass;
-(BOOL)enabledForDADataclass:(int)dadataclass;
-(BOOL)isDisabled;
-(BOOL)supportsDADataclass:(int)dataclass;
// declared property setter: -(void)setUsername:(id)username;
// declared property getter: -(id)username;
-(id)displayName;
// declared property setter: -(void)setAccountDescription:(id)description;
// declared property getter: -(id)accountDescription;
-(void)_setPersistentUUID:(id)uuid;
// declared property getter: -(id)persistentUUID;
// declared property getter: -(id)scheduleIdentifier;
-(id)syncStoreIdentifier;
-(id)accountID;
-(void)resetAccountID;
-(id)initWithProperties:(id)properties;
-(id)initWithBackingAccountInfo:(id)backingAccountInfo;
-(void)dealloc;
-(BOOL)handleTrustChallenge:(id)challenge;
-(void)handleTrust:(SecTrust*)trust forHost:(id)host withCompletionBlock:(id)completionBlock;
-(id)_serverSuffixesToAlwaysFail;
-(int)_actionForTrust:(SecTrust*)trust host:(id)host service:(id)service;
-(void)_handlePasswordNotification:(CFUserNotificationRef)notification response:(unsigned long)response callback:(id)callback;
-(void)_renewAccountCredentialsWithHandler_legacy:(id)handler_legacy;
-(void)renewAccountCredentialsWithHandler:(id)handler;
// declared property getter: -(id)backingCredentialAccount;
-(id)localizedInvalidPasswordMessage;
-(id)localizedIdenticalAccountFailureMessage;
-(void)cancelShareResponseInstance:(id)instance error:(id)error;
-(id)respondToShareRequestForCalendar:(id)calendar withResponse:(int)response consumer:(id)consumer;
-(void)cancelDownloadingInstance:(id)instance error:(id)error;
-(id)beginDownloadingAttachmentWithUUID:(id)uuid consumer:(id)consumer;
-(BOOL)sendEmailsForCalEvents:(id)calEvents consumer:(id)consumer;
-(void)synchronizeEventsFolder:(id)folder previousTag:(id)tag actions:(id)actions highestIdContext:(XXStruct_SMhV9B*)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
-(id)eventsFolders;
-(id)defaultEventsFolder;
-(void)synchronizeContactsFolder:(id)folder previousTag:(id)tag previousSyncToken:(id)token actions:(id)actions highestIdContext:(XXStruct_K5nmsA*)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed previousTagIsSuspect:(BOOL)suspect consumer:(id)consumer;
-(id)contactsFolders;
-(id)defaultContactsFolder;
-(id)deletedItemsFolder;
-(id)sentItemsFolder;
-(id)inboxFolder;
-(id)delegateeInvitationICSRepresentationForMetaData:(id)metaData inFolderWithId:(id)anId outSummary:(id*)summary;
-(BOOL)reattemptInvitationLinkageForMetaData:(id)metaData inFolderWithId:(id)anId;
-(int)supportsEmailFlagging;
-(int)supportsMailboxSearch;
-(BOOL)searchQueriesRunning;
-(void)cancelAllSearchQueries;
-(void)cancelSearchQuery:(id)query;
-(void)performSearchQuery:(id)query;
// converted property setter: -(void)setToDosNumberOfPastDaysToSync:(int)sync;
// converted property getter: -(int)toDosNumberOfPastDaysToSync;
-(void)synchronizeToDosFolder:(id)dosFolder previousTag:(id)tag actions:(id)actions highestIdContext:(XXStruct_SMhV9B*)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
-(id)toDosFolders;
-(id)defaultToDosFolder;
-(void)synchronizeNotesFolder:(id)folder noteContext:(id)context previousTag:(id)tag actions:(id)actions changeSet:(id)set notesToDeleteAfterSync:(id)deleteAfterSync isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
-(id)notesFolders;
-(id)defaultNotesFolder;
-(void)synchronizeBookmarkTreeWithConsumer:(id)consumer hasRemoteChanges:(BOOL)changes;
-(void)getRootFolderWithConsumer:(id)consumer;
@end

