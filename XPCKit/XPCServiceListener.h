/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/XPCKit.framework/XPCKit
 */

#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableSet, NSObject, NSString;
@protocol OS_xpc_object, OS_dispatch_queue, XPCServiceListenerDelegate;

@interface XPCServiceListener : XXUnknownSuperclass {
@private
	NSString* _serviceName;
	id<XPCServiceListenerDelegate> _delegate;
	NSObject<OS_dispatch_queue>* _workQueue;
	NSObject<OS_xpc_object>* _listener;
	NSMutableSet* _serviceConnections;
	unsigned long _clientCount;
}
@property(assign, nonatomic) unsigned long clientCount;	// @synthesize=_clientCount
@property(retain, nonatomic) NSMutableSet* serviceConnections;	// @synthesize=_serviceConnections
@property(retain, nonatomic) NSObject<OS_xpc_object>* listener;	// @synthesize=_listener
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* workQueue;	// @synthesize=_workQueue
@property(readonly, assign, nonatomic) id<XPCServiceListenerDelegate> delegate;	// @synthesize=_delegate
@property(readonly, assign, nonatomic) NSString* serviceName;	// @synthesize=_serviceName
// declared property setter: -(void)setClientCount:(unsigned long)count;
// declared property getter: -(unsigned long)clientCount;
// declared property setter: -(void)setServiceConnections:(id)connections;
// declared property getter: -(id)serviceConnections;
// declared property setter: -(void)setListener:(id)listener;
// declared property getter: -(id)listener;
// declared property setter: -(void)setWorkQueue:(id)queue;
// declared property getter: -(id)workQueue;
// declared property getter: -(id)delegate;
// declared property getter: -(id)serviceName;
-(void).cxx_destruct;
-(void)serviceConnectionDidDisconnect:(id)serviceConnection;
-(void)workQueueHandleIncomingConnection:(id)connection;
-(void)shutDownCompletionBlock:(id)block;
-(void)_workQueueShutDownServiceConnections:(id)connections index:(unsigned)index completionBlock:(id)block;
-(void)start;
-(id)initWithServiceName:(id)serviceName queue:(id)queue delegate:(id)delegate;
-(id)debugDescription;
@end

