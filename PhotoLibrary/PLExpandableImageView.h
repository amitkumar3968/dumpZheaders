/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

#import "PhotoLibrary-Structs.h"
#import "PLExpandableView.h"
#import "PLStackableImage.h"

@class PLManagedAsset, UIImageView, PLVideoView, NSString, PLImageView;

@interface PLExpandableImageView : PLExpandableView <PLStackableImage> {
	PLImageView* _imageView;
	int _imageID;
	CGSize _originalSize;
	float _originalWidth;
	float _originalAngle;
	CGPoint _anchorPoint;
	float _imageRotationAngle;
	float _pinchWidth;
	float _pinchAngle;
	float _pinchScale;
	CGRect _initialExpandingFrame;
	CGRect _originalBounds;
	float _currentAngle;
	CGSize _centerOffset;
	PLManagedAsset* _photo;
	struct {
		unsigned isRotating : 1;
		unsigned didTrack : 1;
		unsigned updateFrame : 1;
		unsigned didLayout : 1;
		unsigned alwaysDoLayout : 1;
		unsigned didComputeCenterOffset : 1;
		unsigned imageIsFullScreen : 1;
	} _exImageFlags;
}
@property(readonly, assign, nonatomic) CGRect frameOfImage;
@property(readonly, assign, nonatomic) BOOL isBeingManipulated;
@property(assign, nonatomic) float transitionProgress;
@property(assign, nonatomic, getter=isShadowEnabled) BOOL shadowEnabled;
@property(readonly, assign, nonatomic) UIImageView* imageView;
@property(retain, nonatomic) PLManagedAsset* photo;	// @synthesize=_photo
@property(assign, nonatomic, getter=isBorderAndAccessoriesVisible) BOOL borderAndAccessoriesVisible;
@property(readonly, assign, nonatomic) BOOL showsPlaceholder;
@property(retain, nonatomic) PLVideoView* videoView;
@property(readonly, assign, nonatomic) CGSize imageSize;
@property(copy, nonatomic) NSString* name;
@property(retain) id image;	// converted property
@property(readonly, assign) float imageRotationAngle;	// converted property
+(float)imageBorderWidth;
// declared property setter: -(void)setPhoto:(id)photo;
// declared property getter: -(id)photo;
-(void)renderSnapshotInContext:(CGContextRef)context;
-(void)setTextBadgeString:(id)string;
// declared property getter: -(BOOL)isBeingManipulated;
// declared property getter: -(float)transitionProgress;
// declared property setter: -(void)setTransitionProgress:(float)progress;
// declared property getter: -(BOOL)isShadowEnabled;
// declared property setter: -(void)setShadowEnabled:(BOOL)enabled;
// converted property getter: -(float)imageRotationAngle;
// declared property setter: -(void)setVideoView:(id)view;
// declared property getter: -(id)videoView;
// declared property getter: -(CGRect)frameOfImage;
// declared property getter: -(CGSize)imageSize;
// declared property getter: -(id)imageView;
-(void)setShowsPlaceholder:(BOOL)placeholder withOpaqueState:(BOOL)opaqueState;
// declared property getter: -(BOOL)showsPlaceholder;
// declared property getter: -(id)name;
// declared property setter: -(void)setName:(id)name;
-(void)setPosterImage:(id)image regionOfInterest:(CGRect)interest;
// converted property getter: -(id)image;
// converted property setter: -(void)setImage:(id)image;
-(void)setImage:(id)image isFullscreen:(BOOL)fullscreen;
// declared property getter: -(BOOL)isBorderAndAccessoriesVisible;
// declared property setter: -(void)setBorderAndAccessoriesVisible:(BOOL)visible;
-(void)setCenter:(CGPoint)center;
-(void)setFrame:(CGRect)frame;
-(id)_contentView;
-(void)finishTransition;
-(void)_bounceToPlace:(id)place finished:(id)finished context:(void*)context;
-(void)_bounceBack:(id)back finished:(id)finished context:(void*)context;
-(float)completeTrackingPinch:(id)pinch toState:(int)state duration:(double)duration;
-(void)setTransformAndCenterForFrame:(CGRect)frame;
-(CGSize)_newSizeFromSize:(CGSize)size;
-(float)continueTrackingPinch:(id)pinch;
-(void)_updatePinchWidthAndScaleWithLeftPoint:(CGPoint)leftPoint rightPoint:(CGPoint)point;
-(void)_updateBorderAndAccessoriesAlpha;
-(float)_borderAlphaForExpansionFraction:(float)expansionFraction;
-(void)setSize:(CGSize)size angle:(float)angle;
-(void)beginTrackingPinch:(id)pinch;
-(void)_setOriginalSize:(CGSize)size;
-(void)stateDidChangeFrom:(int)state;
-(CGRect)_snappedExpandedFrame;
-(float)_expansionFraction;
-(float)_expandedScale;
-(float)_currentScale;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame frameStyle:(int)style;
-(id)initWithFrame:(CGRect)frame frameStyle:(int)style withBorder:(BOOL)border;
@end

