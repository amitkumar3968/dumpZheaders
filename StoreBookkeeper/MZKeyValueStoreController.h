/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper
 */

#import "MZKeyValueStoreOperationDelegate.h"
#import "MZKeyValueStoreDeserializeOperationDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSURL, MZKeyValueStoreAuthenticationController, NSString, NSMutableArray, MZKeyValueStoreTransaction, NSOperationQueue, MZTaskAssertion, NSObject, MZKeyValueStoreDeserializer;
@protocol MZKeyValueStoreControllerDelegate, OS_dispatch_queue;

@interface MZKeyValueStoreController : XXUnknownSuperclass <MZKeyValueStoreOperationDelegate, MZKeyValueStoreDeserializeOperationDelegate> {
@private
	id<MZKeyValueStoreControllerDelegate> _delegate;
	NSURL* _defaultGetURL;
	NSURL* _defaultSetURL;
	NSString* _defaultDomain;
	BOOL _enabled;
	MZKeyValueStoreAuthenticationController* _authenticationController;
	NSMutableArray* _pendingTransactions;
	MZKeyValueStoreTransaction* _currentTransaction;
	NSOperationQueue* _operationQueue;
	BOOL _resolvingError;
	MZKeyValueStoreDeserializer* _currentDeserializer;
	NSObject<OS_dispatch_queue>* _dispatchQueue;
	MZTaskAssertion* _backgroundTaskAssertion;
	id _networkTypeObserver;
}
@property(retain, nonatomic) MZTaskAssertion* backgroundTaskAssertion;	// @synthesize=_backgroundTaskAssertion
@property(assign, nonatomic) id networkTypeObserver;	// @synthesize=_networkTypeObserver
@property(assign, nonatomic) NSObject<OS_dispatch_queue>* dispatchQueue;	// @synthesize=_dispatchQueue
@property(assign, nonatomic, getter=isResolvingError) BOOL resolvingError;	// @synthesize=_resolvingError
@property(retain, nonatomic) MZKeyValueStoreDeserializer* currentDeserializer;	// @synthesize=_currentDeserializer
@property(retain, nonatomic) NSOperationQueue* operationQueue;	// @synthesize=_operationQueue
@property(retain, nonatomic) MZKeyValueStoreTransaction* currentTransaction;	// @synthesize=_currentTransaction
@property(retain, nonatomic) NSMutableArray* pendingTransactions;	// @synthesize=_pendingTransactions
@property(retain) MZKeyValueStoreAuthenticationController* authenticationController;	// @synthesize=_authenticationController
@property(assign, getter=isEnabled) BOOL enabled;	// @synthesize=_enabled
@property(retain) NSURL* defaultSetURL;	// @synthesize=_defaultSetURL
@property(retain) NSURL* defaultGetURL;	// @synthesize=_defaultGetURL
@property(copy) NSString* defaultDomain;	// @synthesize=_defaultDomain
@property(assign) id<MZKeyValueStoreControllerDelegate> delegate;	// @synthesize=_delegate
// declared property setter: -(void)setNetworkTypeObserver:(id)observer;
// declared property getter: -(id)networkTypeObserver;
// declared property setter: -(void)setBackgroundTaskAssertion:(id)assertion;
// declared property getter: -(id)backgroundTaskAssertion;
// declared property setter: -(void)setDispatchQueue:(id)queue;
// declared property getter: -(id)dispatchQueue;
// declared property setter: -(void)setCurrentDeserializer:(id)deserializer;
// declared property getter: -(id)currentDeserializer;
// declared property setter: -(void)setResolvingError:(BOOL)error;
// declared property getter: -(BOOL)isResolvingError;
// declared property setter: -(void)setOperationQueue:(id)queue;
// declared property getter: -(id)operationQueue;
// declared property setter: -(void)setCurrentTransaction:(id)transaction;
// declared property getter: -(id)currentTransaction;
// declared property setter: -(void)setPendingTransactions:(id)transactions;
// declared property getter: -(id)pendingTransactions;
// declared property setter: -(void)setEnabled:(BOOL)enabled;
// declared property getter: -(BOOL)isEnabled;
// declared property setter: -(void)setAuthenticationController:(id)controller;
// declared property getter: -(id)authenticationController;
// declared property setter: -(void)setDefaultDomain:(id)domain;
// declared property getter: -(id)defaultDomain;
// declared property setter: -(void)setDefaultSetURL:(id)url;
// declared property getter: -(id)defaultSetURL;
// declared property setter: -(void)setDefaultGetURL:(id)url;
// declared property getter: -(id)defaultGetURL;
// declared property setter: -(void)setDelegate:(id)delegate;
// declared property getter: -(id)delegate;
-(void)deserializeOperationDidFinish:(id)deserializeOperation shouldReschedule:(BOOL)reschedule;
-(void)keyValueStoreOperationOperationDidFinish:(id)keyValueStoreOperationOperation;
-(void)keyValueStoreOperation:(id)operation scheduleURLOperation:(id)operation2;
-(void)operation:(id)operation failedWithError:(id)error;
-(void)operation:(id)operation didReceiveResponse:(id)response;
-(void)operation:(id)operation finishedWithOutput:(id)output;
-(void)_endBackgroundTask;
-(void)_beginBackgroundTask;
-(void)_delegateTransactionDidFinish:(id)_delegateTransaction;
-(void)_delegateTransactionDidCancel:(id)_delegateTransaction withError:(id)error;
-(BOOL)_delegateTransactionDidFail:(id)_delegateTransaction withError:(id)error;
-(BOOL)_delegateShouldScheduleTransaction:(id)_delegate error:(id*)error;
-(void)_errorResolutionDefault:(id)aDefault;
-(void)_errorResolutionCancel:(id)cancel;
-(void)_errorResolutionRetry:(id)retry;
-(void)_resolveError:(id)error resolution:(int)resolution;
-(void)_processOperationOutput:(id)output operationAuthenticated:(BOOL)authenticated;
-(void)_transactionDidCancel:(id)_transaction withError:(id)error;
-(void)_transactionDidFail:(id)_transaction withError:(id)error;
-(void)_currentTransactionDidFinish;
-(id)_scheduleTransactionWithType:(int)type sinceDomainVersion:(id)version URL:(id)url keys:(id)keys processor:(id)processor;
-(BOOL)_authenticationCanProcessTransaction:(id)transaction error:(id*)error;
-(BOOL)_clampsCanScheduleTransaction:(id)transaction error:(id*)error;
-(BOOL)_isTransactionValid:(id)valid error:(id*)error;
-(BOOL)_isEnabledForTransaction:(id)transaction error:(id*)error;
-(BOOL)_canScheduleTransaction:(id)transaction error:(id*)error;
-(void)_addPendingTransaction:(id)transaction;
-(void)_scheduleTransaction:(id)transaction;
-(id)_requestForTransaction:(id)transaction;
-(void)_processCurrentTransaction;
-(void)_processPendingTransactions;
-(void)_cancelTransaction:(id)transaction error:(id)error;
-(void)_cancelAllTransactions:(id)transactions;
-(void)performBlockAndWait:(id)wait;
-(void)performBlock:(id)block;
-(BOOL)isIdle;
-(void)reset;
-(void)resolveError:(id)error resolution:(int)resolution;
-(void)cancelAllTransactionsCancelCode:(int)code;
-(void)cancelAllTransactions;
-(void)cancelScheduledTransaction:(id)transaction;
-(void)scheduleTransaction:(id)transaction;
-(id)scheduleSetTransactionWithKeys:(id)keys processor:(id)processor;
-(id)scheduleGetTransactionWithKeys:(id)keys processor:(id)processor;
-(id)scheduleGetAllTransactionWithSinceDomainVersion:(id)sinceDomainVersion processor:(id)processor;
-(id)clampsController;
-(void)operationQueue:(id)queue willRemoveOperation:(id)operation;
-(void)operationQueue:(id)queue willAddOperation:(id)operation;
-(void)clearWeakReferencesInOperation:(id)operation;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)initWithDomain:(id)domain baseURLForGETAll:(id)getall baseURLForPUTAll:(id)putall;
@end

