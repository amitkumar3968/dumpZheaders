/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream
 */

#import "MSCupidStateMachine.h"
#import "NSObject.h"
#import "MSPublisher.h"
#import "MSPublishStreamsProtocolDelegate.h"
#import "MSPublishStorageProtocolDelegate.h"

@class NSMutableArray, NSMutableDictionary, MSMediaStreamDaemon, NSURL, MSPublishStreamsProtocol, MSObjectQueue;
@protocol MSPublishStorageProtocol, MSPublisherDelegate;

@protocol MSPublisher <NSObject>
@property(assign, nonatomic) int publishBatchSize;
@property(assign, nonatomic) id<MSPublisherDelegate> delegate;
// declared property setter: -(void)setPublishBatchSize:(int)size;
// declared property getter: -(int)publishBatchSize;
// declared property setter: -(void)setDelegate:(id)delegate;
// declared property getter: -(id)delegate;
-(void)publish;
-(void)stop;
-(void)abort;
-(void)submitAssetCollectionsForPublication:(id)publication skipAssetCollections:(id)collections;
-(void)submitAssetCollectionsForPublication:(id)publication;
@end

@interface MSPublisher : MSCupidStateMachine <MSPublisher, MSPublishStreamsProtocolDelegate, MSPublishStorageProtocolDelegate> {
@private
	id<MSPublisherDelegate> _delegate;
	MSMediaStreamDaemon* _daemon;
	int _state;
	MSObjectQueue* _uploadQueue;
	NSMutableArray* _requestAuthQueue;
	unsigned _sendingQueueCount;
	NSMutableArray* _sendingQueue;
	NSMutableDictionary* _fileHashToAssetMap;
	MSPublishStreamsProtocol* _protocol;
	id<MSPublishStorageProtocol> _storageProtocol;
	NSURL* _storageProtocolURL;
	NSMutableArray* _tempFiles;
	NSMutableDictionary* _maxSizeByUTI;
	long long _publishTargetByteCount;
	int _publishBatchSize;
	int _maxErrorCount;
}
@property(assign, nonatomic) id<MSPublisherDelegate> delegate;	// @synthesize=_delegate
@property(assign, nonatomic) int publishBatchSize;	// @synthesize=_publishBatchSize
@property(assign, nonatomic) long long publishTargetByteCount;	// @synthesize=_publishTargetByteCount
@property(retain, nonatomic) NSURL* storageProtocolURL;	// @synthesize=_storageProtocolURL
@property(assign, nonatomic) MSMediaStreamDaemon* daemon;	// @synthesize=_daemon
+(BOOL)isInRetryState;
+(void)stopAllActivities;
+(id)personIDsWithOutstandingActivities;
+(id)nextActivityDateForPersonID:(id)personID;
+(id)nextActivityDate;
+(void)_setMasterNextActivityDate:(id)date forPersonID:(id)personID;
+(void)forgetPersonID:(id)anId;
+(id)_clearInstantiatedPublishersByPersonID;
+(id)existingPublisherForPersonID:(id)personID;
+(id)publisherForPersonID:(id)personID;
// declared property setter: -(void)setPublishBatchSize:(int)size;
// declared property getter: -(int)publishBatchSize;
// declared property setter: -(void)setPublishTargetByteCount:(long long)count;
// declared property getter: -(long long)publishTargetByteCount;
// declared property setter: -(void)setStorageProtocolURL:(id)url;
// declared property getter: -(id)storageProtocolURL;
// declared property setter: -(void)setDaemon:(id)daemon;
// declared property getter: -(id)daemon;
// declared property setter: -(void)setDelegate:(id)delegate;
// declared property getter: -(id)delegate;
-(void).cxx_destruct;
-(BOOL)_isInRetryState;
-(void)stop;
-(void)abort;
-(void)_forget;
-(void)_abort;
-(id)_abortedError;
-(int)_stop;
-(void)publishStreamsProtocol:(id)protocol didFinishSendingUploadCompleteError:(id)error;
-(void)_sendUploadComplete;
-(void)publishStorageProtocolDidFinishPublishingAllAssets:(id)publishStorageProtocol;
-(void)_categorizeError:(id)error setOutIsIgnorable:(BOOL*)ignorable setOutIsCounted:(BOOL*)counted setOutIsFatal:(BOOL*)fatal setOutNeedsBackoff:(BOOL*)backoff setOutIsTemporary:(BOOL*)temporary setOutIsTokenAuth:(BOOL*)auth setOutIsAuthError:(BOOL*)error8;
-(void)publishStorageProtocol:(id)protocol didFinishUsingFD:(int)fd forAsset:(id)asset;
-(int)publishStorageProtocol:(id)protocol didRequestFDForAsset:(id)asset;
-(void)publishStorageProtocol:(id)protocol didFinishUploadingAsset:(id)asset error:(id)error;
-(void)_sendFilesToMMCS;
-(void)publishStreamsProtocol:(id)protocol didReceiveAuthenticationError:(id)error;
-(void)publishStreamsProtocol:(id)protocol didFinishUploadingMetadataResponse:(id)response error:(id)error;
-(id)_invalidStreamsResponseErrorUnderlyingError:(id)error;
-(void)_sendMetadataToStreams;
-(void)submitAssetCollectionsForPublication:(id)publication skipAssetCollections:(id)collections;
-(void)submitAssetCollectionsForPublication:(id)publication;
-(void)_didFinishUsingAssetCollections:(id)collections;
-(void)_removeAssetsInAssetCollectionWrappersFromAssetMap:(id)assetMap;
-(void)_removeAssetFromFileHashMap:(id)fileHashMap;
-(void)_addAssetToFileHashMap:(id)fileHashMap;
-(void)_requestDerivatives;
-(void)publish;
-(BOOL)_isAllowedToUpload;
-(void)_serverSideConfigurationDidChange:(id)_serverSideConfiguration;
-(void)_refreshServerSideConfiguredParameters;
-(void)computeHashForAsset:(id)asset;
-(BOOL)enqueueAssetCollections:(id)collections outError:(id*)error;
-(void)_updateMasterManifest;
-(void)dealloc;
-(void)deactivate;
-(id)initWithPersonID:(id)personID baseURL:(id)url;
@end

