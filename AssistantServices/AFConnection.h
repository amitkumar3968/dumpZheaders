/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : XXUnknownSuperclass <AFManagedStore> {
@private
	DKConnection* _connection;
	id<AFAssistantUIService> _delegate;
	id<AFSpeechDelegate> _speechDelegate;
	float _averagePower;
	float _peakPower;
	NSString* _outstandingRequestClass;
	unsigned _stateInSync : 1;
	unsigned _shouldSpeak : 1;
	unsigned _isCapturingSpeech : 1;
	unsigned _hasOutstandingRequest : 1;
	unsigned _replyContextMayInitiateCall : 1;
	BOOL _hasActiveRequest;
	NSMutableDictionary* _replies;
}
@property(readonly, assign, nonatomic) BOOL isRecording;
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// @synthesize=_speechDelegate
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// @synthesize=_delegate
@property(readonly, assign) float averagePower;	// converted property
@property(readonly, assign) float peakPower;	// converted property
+(void)defrost;
+(BOOL)userDataSyncNeeded;
+(void)stopMonitoringAvailability;
+(BOOL)isAvailable;
+(void)beginMonitoringAvailability;
+(void)_reachabilityDidChange:(id)_reachability;
+(BOOL)assistantIsSupported;
+(BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id*)error;
+(BOOL)assistantIsEnabled;
+(void)initialize;
// declared property setter: -(void)setSpeechDelegate:(id)delegate;
// declared property getter: -(id)speechDelegate;
// declared property getter: -(id)delegate;
-(void).cxx_destruct;
-(void)setDomainObject:(id)object forKey:(id)key;
-(id)domainObjectForKey:(id)key;
-(void)clearUndoStack;
-(void)redoRequest;
-(void)undoRequest;
-(void)clearAndSetApplicationContextWithBulletins:(id)bulletins;
-(void)clearAndSetApplicationContext;
-(void)clearContext;
-(void)sendReplyCommand:(id)command;
-(void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;
-(void)sendGenericAceCommand:(id)command;
-(BOOL)replyContextMayInitiateCall;
// converted property getter: -(float)peakPower;
// converted property getter: -(float)averagePower;
-(BOOL)shouldSpeak;
// declared property getter: -(BOOL)isRecording;
-(void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;
-(void)rollbackRequest;
-(void)cancelRequest;
-(void)stopSpeech;
-(void)stopSpeechWithOptions:(id)options;
-(void)updateSpeechOptions:(id)options;
-(void)cancelSpeech;
-(void)startSpeechRequestWithOptions:(id)options;
-(void)startRequestWithText:(id)text;
-(void)startRequestWithText:(id)text timeout:(double)timeout;
-(void)setLockState:(BOOL)state screenLocked:(BOOL)locked;
-(BOOL)setLanguageCode:(id)code error:(id*)error;
-(void)preheat;
-(void)endSession;
-(void)_willCompleteRequest;
-(void)_willFailRequest;
-(void)_willCancelRequest;
-(void)_willStartRequest;
-(void)_requestStateUpdate;
-(void)_cancelRequestTimeout;
-(void)_scheduleRequestTimeout:(double)timeout;
-(void)_invokeRequestTimeout;
-(void)_clearConnection;
-(id)_connection;
-(void)_handleMessage:(id)message;
-(void)_unhandledMessage:(id)message;
-(void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;
-(void)_msgSpeechRecognized:(id)recognized;
-(void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;
-(void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;
-(void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;
-(void)_msgSpeechLevelUpdate:(id)update;
-(void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;
-(void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;
-(void)_msgReplyMayInitiateCall:(id)call;
-(void)_msgStateUpdate:(id)update;
-(void)_msgRequestError:(id)error;
-(void)_msgDismissAssistant:(id)assistant;
-(void)_msgOpenURL:(id)url;
-(void)_msgRequestCompleted:(id)completed;
-(void)_msgDoCommand:(id)command;
-(void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;
-(void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;
-(void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;
-(void)_tellSpeechDelegateRecordingDidCancel;
-(void)_tellSpeechDelegateRecordingDidEnd;
-(void)_tellSpeechDelegateRecordingDidBegin;
-(void)_tellSpeechDelegateRecordingWillBegin;
-(void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;
-(void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;
-(void)_tellDelegateRequestFinished;
-(void)_requestDidEnd;
-(void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data;
-(void)_checkAndSetIsCapturingSpeech:(BOOL)speech;
// declared property setter: -(void)setDelegate:(id)delegate;
-(void)dealloc;
-(id)init;
-(void)startSpeechRequestWithSpeechFileAtURL:(id)url;
-(void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;
-(void)_asyncBarrierWithBlock:(id)block;
-(void)_barrier;
-(void)_sendMessage:(id)message withReplySync:(id)replySync;
-(void)_sendMessage:(id)message withReply:(id)reply;
@end

