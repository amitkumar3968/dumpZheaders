/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

#import "VectorKit-Structs.h"
#import "VKTileSourceClient.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class GEOTileKeyList, NSArray, NSMutableSet, VKMapRasterizer, VKTileCache, NSSet, VKTileSelection, VKStylesheet, _VKTileProviderTimerTarget, VKTileKeyList, NSTimer, VKTileSource;
@protocol VKMapLayer, VKTileProviderClient;

__attribute__((visibility("hidden")))
@interface VKTileProvider : XXUnknownSuperclass <VKTileSourceClient> {
@private
	id<VKTileProviderClient> _client;
	int _mode;
	VKTileSelection* _tileSelection;
	VKTileKeyList* _keysInView;
	NSTimer* _evaluationTimer;
	NSMutableSet* _tilesToRender;
	NSArray* _holes;
	NSMutableSet* _lostTiles;
	BOOL _fallbackEnabled;
	VKTileCache* _tilePool;
	VKTileSource* _tilesSources[26];
	VKTileSource* _optionalTileSources[26];
	VKStylesheet* _stylesheet;
	float _loadingProgress;
	VKCameraState _lastCameraState;
	CGSize _lastCanvasSize;
	BOOL _tilesChanged;
	VKMapRasterizer* _rasterizer;
	id<VKMapLayer> _debugLayer;
	GEOTileKeyList* _debugLayerKeys;
	NSMutableSet* _geoTileSources;
	int _tileReserveLimit;
	int _tileMaximumLimit;
	BOOL _useSmallTileCache;
	_VKTileProviderTimerTarget* _timerTarget;
}
@property(readonly, assign, nonatomic) GEOTileKeyList* debugLayerKeys;	// @synthesize=_debugLayerKeys
@property(retain, nonatomic) id<VKMapLayer> debugLayer;	// @synthesize=_debugLayer
@property(readonly, assign, nonatomic) NSArray* visibleTileSets;
@property(readonly, assign, nonatomic) float loadingProgress;	// @synthesize=_loadingProgress
@property(readonly, assign, nonatomic) NSSet* tilesToRender;	// @synthesize=_tilesToRender
@property(readonly, assign, nonatomic) VKTileKeyList* keysInView;	// @synthesize=_keysInView
@property(retain, nonatomic) VKStylesheet* stylesheet;	// @synthesize=_stylesheet
@property(assign, nonatomic) id<VKTileProviderClient> client;	// @synthesize=_client
@property(assign, nonatomic) BOOL useSmallTileCache;	// @synthesize=_useSmallTileCache
@property(assign, nonatomic, getter=isFallbackEnabled) BOOL fallbackEnabled;	// @synthesize=_fallbackEnabled
@property(assign, nonatomic) int mode;	// @synthesize=_mode
// declared property setter: -(void)setFallbackEnabled:(BOOL)enabled;
// declared property getter: -(BOOL)isFallbackEnabled;
// declared property getter: -(id)debugLayerKeys;
// declared property setter: -(void)setDebugLayer:(id)layer;
// declared property getter: -(id)debugLayer;
// declared property getter: -(BOOL)useSmallTileCache;
// declared property getter: -(float)loadingProgress;
// declared property getter: -(id)stylesheet;
// declared property getter: -(id)tilesToRender;
// declared property getter: -(id)keysInView;
// declared property setter: -(void)setMode:(int)mode;
// declared property getter: -(int)mode;
// declared property setter: -(void)setClient:(id)client;
// declared property getter: -(id)client;
-(void)didStopLoadingTilesWithError:(id)error;
-(void)willStartLoadingTiles;
-(BOOL)tileSource:(id)source keyIsNeeded:(const VKTileKey*)needed;
-(void)invalidateTilesFromTileSource:(id)tileSource;
-(void)tileSource:(id)source invalidateTilesWithState:(unsigned)state;
-(void)tileSource:(id)source invalidateKeys:(id)keys;
-(void)tileSource:(id)source invalidateKey:(const VKTileKey*)key;
-(void)tileSource:(id)source didFailToLoadTileForKey:(const VKTileKey*)key error:(id)error;
-(void)tileSource:(id)source didFailToDecodeTileForKey:(const VKTileKey*)key;
-(void)tileSource:(id)source didFetchTile:(id)tile forKey:(const VKTileKey*)key;
-(BOOL)tileSourceMayUseNetwork:(id)network;
-(void)updateWithContext:(id)context;
-(void)_pushEvaluationTimer;
-(void)_ensureEvaluationTimer;
-(id)selectTiles:(int*)tiles needRasterization:(BOOL*)rasterization;
-(void)_fillHoles:(id)holes context:(id)context;
-(void)releaseChildrenFallbackTilesForTile:(id)tile context:(id)context;
-(BOOL)releaseParentFallbackTileForTile:(id)tile;
-(void)timerFired:(id)fired;
-(void)_fetchAvailableTiles:(BOOL)tiles;
-(void)configureTileSelection;
-(unsigned)layerForSource:(id)source;
-(id)sourceForLayer:(id)layer;
-(void)removeTileSourceForMapLayer:(unsigned)mapLayer;
-(void)setTileSource:(id)source forMapLayer:(unsigned)mapLayer optional:(BOOL)optional;
-(void)tileSourcesDidChange;
-(BOOL)evaluateSelectedTileForRendering:(id)rendering;
-(void)changeTileForKey:(const VKTileKey*)key toState:(unsigned)state withMetadata:(id)metadata withTile:(id)tile forLayer:(unsigned)layer;
-(void)releaseFallbackTileForRendering:(id)rendering;
-(BOOL)canRenderTile:(id)tile;
-(BOOL)hasRequiredTileData:(id)data;
-(void)releaseTileForRendering:(id)rendering;
-(void)prepareTileForRendering:(id)rendering;
-(void)retireTiles:(id)tiles;
-(void)retireTile:(id)tile;
-(id)tileForKey:(const VKTileKey*)key;
-(void)foreachActiveLayer:(id)layer;
-(void)foreachOptionalLayer:(id)layer;
-(id)detailedDescription;
-(void)flushCaches;
-(void)clearScene;
-(void)rasterizer:(id)rasterizer didMakeRasterTile:(id)tile forKey:(const VKTileKey*)key;
-(void)requireRasterization:(id)rasterization;
-(void)dealloc;
-(void)quiesce;
-(id)initWithClient:(id)client;
// declared property getter: -(id)visibleTileSets;
// declared property setter: -(void)setStylesheet:(id)stylesheet;
// declared property setter: -(void)setUseSmallTileCache:(BOOL)cache;
@end

