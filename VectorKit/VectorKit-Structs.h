/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

typedef struct _NSZone NSZone;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct {
	double x;
	double y;
	double z;
} XXStruct_taVrlB;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double latitude;
	double longitude;
} XXStruct_zYrK5D;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct {
	double v[4][4];
} XXStruct_$zuyAD;

typedef struct VKTileKey {
	unsigned z;
	int x;
	int y;
	unsigned pointSize;
} VKTileKey;

typedef struct _GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct CGContext* CGContextRef;

template<>
struct __compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo> > {
	VKTileKey* __first_;
};

template<>
struct vector<VGLGroupInfo, vk_allocator<VGLGroupInfo> > {
	VKTileKey* __begin_;
	VKTileKey* __end_;
	__compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo> > __end_cap_;
};

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct {
	float x0;
	float x1;
	float y0;
	float y1;
	float z0;
	float z1;
} XXStruct_VR3TOC;

template<>
struct __compressed_pair<int *, vk_allocator<int> > {
	int* __first_;
};

template<>
struct vector<int, vk_allocator<int> > {
	int* __begin_;
	int* __end_;
	__compressed_pair<int *, vk_allocator<int> > __end_cap_;
};

template<>
struct bitset<16> {
	unsigned __first_;
};

template<>
struct __hash_node<std::__1::pair<unsigned int, unsigned int>, void *>;

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > {
	__compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>> > {
	__hash_node<std::__1::pair<unsigned int, unsigned int>, void* >** __first_;
	__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, unsigned int>, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true> > __p3_;
};

template<>
struct unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, unsigned int>> > {
	__hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int>> > __table_;
};

typedef struct {
	float x;
	float y;
	float z;
} XXStruct_ZUkpeA;

typedef struct _VGLColor {
	float r;
	float g;
	float b;
	float a;
} VGLColor;

typedef union {
	struct {
		float m00;
		float m01;
		float m02;
		float m03;
		float m10;
		float m11;
		float m12;
		float m13;
		float m20;
		float m21;
		float m22;
		float m23;
		float m30;
		float m31;
		float m32;
		float m33;
	};
	float m[16];
} XXUnion_7lcBWC;

template<>
struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

template<>
struct __compressed_pair<std::__1::basic_string<char> *, vk_allocator<std::__1::basic_string<char>> > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >* __first_;
};

template<>
struct vector<std::__1::basic_string<char>, vk_allocator<std::__1::basic_string<char>> > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >* __begin_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >* __end_;
	__compressed_pair<std::__1::basic_string<char> *, vk_allocator<std::__1::basic_string<char>> > __end_cap_;
};

typedef union {
	UIEdgeInsets _field1;
	float _field2[2][2];
	float _field3[4];
} XXUnion_AG1aMA;

typedef union {
	struct {
		float m00;
		float m01;
		float m02;
		float m10;
		float m11;
		float m12;
		float m20;
		float m21;
		float m22;
	};
	float m[9];
} XXUnion_euT3yD;

typedef struct {
	BOOL orthographic;
	double width;
	double height;
	double near;
	double far;
} XXStruct_TVSAjA;

typedef struct VKCameraState {
	XXStruct_taVrlB position;
	XXStruct_$zuyAD orientation;
	float aspectRatio;
	float verticalFieldOfView;
} VKCameraState;

typedef struct {
	double x0;
	double x1;
	double y0;
	double y1;
} XXStruct_HKaJvA;

typedef struct VKFootprintConvexHull_struct {
	int edgeCount;
	XXStruct_taVrlB edgeOrigin[6];
	XXStruct_taVrlB edgeNormal[6];
} VKFootprintConvexHull_struct;

typedef struct {
	XXStruct_taVrlB p;
	XXStruct_taVrlB n;
} XXStruct_8tiOOA;

typedef struct VKCacheKey {
	unsigned a;
	unsigned b;
	unsigned c;
	unsigned d;
} VKCacheKey;

typedef struct RouteCalibration {
	unsigned _field1;
	float _field2;
} RouteCalibration;

typedef struct {
	XXStruct_taVrlB position;
	double course;
	BOOL onRoute;
} XXStruct_6eq5eA;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct {
	unsigned* list;
	unsigned count;
	unsigned size;
} XXStruct_stqouA;

typedef struct {
	float* list;
	unsigned count;
	unsigned size;
} XXStruct_Dp6gGD;

typedef struct {
	id _field1;
	char* _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned long long _field8;
	BOOL _field9;
	unsigned long long _field10;
	float _field11;
	id _field12;
	int _field13;
} XXStruct_1vGfDB;

typedef struct VKProfileSparseRampValue {
	float value;
	unsigned char hi;
} VKProfileSparseRampValue;

template<>
struct VKProfileSparseRamp<float> {
	union {
		VKProfileSparseRampValue v[2];
		float* extra;
	} u;
	unsigned char count;
};

typedef struct VKProfileSparseRampValue {
	VGLColor value;
	unsigned char hi;
} VKProfileSparseRampValue;

template<>
struct VKProfileSparseRamp<_VGLColor> {
	union {
		VKProfileSparseRampValue v[2];
		VGLColor* extra;
	} u;
	unsigned char count;
};

typedef struct VKProfileSparseRampValue {
	BOOL value;
	unsigned char hi;
} VKProfileSparseRampValue;

template<>
struct VKProfileSparseRamp<signed char> {
	union {
		VKProfileSparseRampValue v[2];
		char* extra;
	} u;
	unsigned char count;
};

typedef struct VKProfileSparseRampValue {
	int value;
	unsigned char hi;
} VKProfileSparseRampValue;

typedef union {
	VKProfileSparseRampValue v[2];
	int* extra;
} XXUnion_Pb_S3C;

template<>
struct VKProfileSparseRamp<int> {
	XXUnion_Pb_S3C u;
	unsigned char count;
};

typedef struct {
	VKProfileSparseRamp<float> _field1;
	VKProfileSparseRamp<float> _field2;
	VKProfileSparseRamp<float> _field3;
	VKProfileSparseRamp<float> _field4;
	VKProfileSparseRamp<_VGLColor> _field5;
	VKProfileSparseRamp<_VGLColor> _field6;
	VKProfileSparseRamp<signed char> _field7;
	VKProfileSparseRamp<int> _field8;
	VKProfileSparseRamp<int> _field9;
	VKProfileSparseRamp<signed char> _field10;
	VKProfileSparseRamp<signed char> _field11;
} XXStruct_5gMAmD;

typedef struct {
	VKProfileSparseRamp<float> _field1;
	VKProfileSparseRamp<_VGLColor> _field2;
	int _field3;
} XXStruct_p18uAA;

typedef struct {
	unsigned _field1;
	int _field2;
	int* _field3;
	unsigned _field4;
} XXStruct_OOPCeD;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct VKProfileSparseRampValue {
	unsigned value;
	unsigned char hi;
} VKProfileSparseRampValue;

template<>
struct VKProfileSparseRamp<unsigned int> {
	union {
		VKProfileSparseRampValue v[2];
		unsigned* extra;
	} u;
	unsigned char count;
};

template<>
struct VKProfileSparseRamp<VKLabelTextVisibility> {
	XXUnion_Pb_S3C u;
	unsigned char count;
};

template<>
struct VKProfileSparseRamp<VKGenericShieldStyle> {
	XXUnion_Pb_S3C u;
	unsigned char count;
};

typedef struct VKProfileSparseRampValue {
	CGSize value;
	unsigned char hi;
} VKProfileSparseRampValue;

template<>
struct VKProfileSparseRamp<CGSize> {
	union {
		VKProfileSparseRampValue v[2];
		CGSize* extra;
	} u;
	unsigned char count;
};

typedef struct {
	int iconStyle;
	VGLColor iconBadgeColor;
	VGLColor iconGradientColor[2];
	VGLColor iconGlyphColor;
	VGLColor iconHaloColor;
} XXStruct_VkeH1A;

typedef struct {
	BOOL _field1;
	float _field2;
	float _field3;
	float _field4;
	unsigned _field5;
	float _field6;
	BOOL _field7;
	BOOL _field8;
	BOOL _field9;
	VGLColor _field10;
	VGLColor _field11;
	unsigned _field12;
	float _field13;
	id _field14;
	id _field15;
	XXStruct_VkeH1A _field16;
	BOOL _field17;
	float _field18;
	float _field19;
	int _field20;
	BOOL _field21;
	BOOL _field22;
	BOOL _field23;
} XXStruct_USkF9C;

typedef struct {
	float _field1;
	BOOL _field2;
	BOOL _field3;
	id _field4;
} XXStruct_a6naZD;

typedef struct LineDash LineDash;

template<>
struct __compressed_pair<LineDash *, vk_allocator<LineDash> > {
	LineDash* __first_;
};

template<>
struct vector<LineDash, vk_allocator<LineDash> > {
	LineDash* __begin_;
	LineDash* __end_;
	__compressed_pair<LineDash *, vk_allocator<LineDash> > __end_cap_;
};

typedef struct LineStipple LineStipple;

template<>
struct __compressed_pair<LineStipple *, vk_allocator<LineStipple> > {
	LineStipple* __first_;
};

template<>
struct vector<LineStipple, vk_allocator<LineStipple> > {
	LineStipple* __begin_;
	LineStipple* __end_;
	__compressed_pair<LineStipple *, vk_allocator<LineStipple> > __end_cap_;
};

template<>
struct VKProfileSparseRamp<GEOVectorTilePoint> {
	union {
		VKProfileSparseRampValue v[2];
		VKTileKey* extra;
	} u;
	unsigned char count;
};

typedef struct CGImage* CGImageRef;

typedef struct CGImageBlockSet* CGImageBlockSetRef;

typedef struct CGColor* CGColorRef;

template<>
struct __compressed_pair<double *, vk_allocator<double> > {
	double* _field1;
};

template<>
struct vector<double, vk_allocator<double> > {
	double* _field1;
	double* _field2;
	__compressed_pair<double *, vk_allocator<double> > _field3;
};

template<>
struct VKCircularBuffer<double> {
	vector<double, vk_allocator<double> > _field1;
	unsigned _field2;
	bool _field3;
	double _field4;
};

typedef struct {
	XXStruct_zYrK5D _field1;
	double _field2;
	XXStruct_zYrK5D _field3;
	id _field4;
	int _field5;
	int _field6;
	BOOL _field7;
	BOOL _field8;
} XXStruct_K89EJC;

typedef struct {
	XXStruct_taVrlB _field1;
	XXStruct_$zuyAD _field2;
} XXStruct_iOFeXC;

typedef struct {
	id _field1;
	id _field2;
	BOOL _field3;
	BOOL _field4;
	VGLColor _field5;
	VGLColor _field6;
	float _field7;
	unsigned _field8;
} XXStruct__PbasC;

template<>
struct __compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> > {
	id* __first_;
};

template<>
struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> > {
	id* __begin_;
	id* __end_;
	__compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> > __end_cap_;
};

template<>
struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {
	id* __begin_;
	id* __end_;
	__compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > __end_cap_;
};

template<>
struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > {
	vector<VGLSingleTexturedGroupCullableMesh* , vk_allocator<VGLSingleTexturedGroupCullableMesh* > >* __first_;
};

template<>
struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > {
	vector<VGLSingleTexturedGroupCullableMesh* , vk_allocator<VGLSingleTexturedGroupCullableMesh* > >* __begin_;
	vector<VGLSingleTexturedGroupCullableMesh* , vk_allocator<VGLSingleTexturedGroupCullableMesh* > >* __end_;
	__compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > __end_cap_;
};

template<>
struct __compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {
	id* __first_;
};

template<>
struct __compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > {
	VKTileKey* __first_;
};

template<>
struct vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap> > {
	VKTileKey* __begin_;
	VKTileKey* __end_;
	__compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > __end_cap_;
};

template<>
struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>;

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > {
	unsigned long _field1;
};

template<>
struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > {
	__compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > _field1;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > {
	__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void* >** _field1;
	__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > _field2;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > _field1;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void* >* _field1;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> _field1;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true> > {
	unsigned long _field1;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true> > {
	float _field1;
};

template<>
struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > _field1;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>> > _field2;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true> > _field3;
	__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true> > _field4;
};

template<>
struct unordered_map<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > {
	__hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > _field1;
};

typedef struct Vector2i {
	int _field1;
	int _field2;
} Vector2i;

typedef struct VKRouteMapMatchingSection* VKRouteMapMatchingSectionRef;

typedef struct Vertex {
	CGSize _field1;
	RouteCalibration _field2;
	float _field3;
	VKTileKey* _field4;
	unsigned char _field5;
	BOOL _field6;
	float _field7;
} Vertex;

typedef struct {
	XXStruct_1vGfDB _field1;
	unsigned _field2;
	unsigned _field3;
	int _field4;
	int _field5;
	unsigned _field6;
	unsigned _field7;
	UIEdgeInsets _field8;
	VKTileKey* _field9;
} XXStruct_IJc5WD;

typedef struct {
	int _field1;
	int _field2;
	int _field3;
} XXStruct_peQPEB;

template<>
struct __hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>> > {
	__hash_node<std::__1::pair<VGLUncompressedTexture* , VGLIconSubMesh* >, void* >** __first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> {
	__hash_node<std::__1::pair<VGLUncompressedTexture* , VGLIconSubMesh* >, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true>, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true>, std::__1::allocator<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true> > __p3_;
};

template<>
struct unordered_map<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, std::__1::equal_to<VGLUncompressedTexture *>, std::__1::allocator<std::__1::pair<VGLUncompressedTexture *const, VGLIconSubMesh *>> > {
	__hash_table<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true>, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true>, std::__1::allocator<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>> > __table_;
};

typedef struct {
	int from;
	int to;
	float fraction;
} XXStruct_OQO8SD;

typedef struct {
	XXStruct_ZUkpeA _field1;
	CGSize _field2;
} XXStruct_CFlJAC;

typedef struct {
	int* list;
	unsigned count;
	unsigned size;
} XXStruct_WmZAAA;

template<>
struct __compressed_pair<unsigned char *, vk_allocator<unsigned char> > {
	char* __first_;
};

template<>
struct vector<unsigned char, vk_allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	__compressed_pair<unsigned char *, vk_allocator<unsigned char> > __end_cap_;
};

template<>
struct __compressed_pair<unsigned short *, vk_allocator<unsigned short> > {
	unsigned short* __first_;
};

template<>
struct vector<unsigned short, vk_allocator<unsigned short> > {
	unsigned short* __begin_;
	unsigned short* __end_;
	__compressed_pair<unsigned short *, vk_allocator<unsigned short> > __end_cap_;
};

typedef struct {
	VKCacheKey _field1;
	struct {
		unsigned _field1;
		int _field2;
		float _field3;
		BOOL _field4;
		BOOL _field5;
		BOOL _field6;
		BOOL _field7;
		BOOL _field8;
		struct {
			unsigned char _field1;
			unsigned short _field2;
		} _field9[16];
	} _field2;
} XXStruct_Jn2zBA;

typedef struct {
	VKTileKey* road;
	unsigned vertexIndexA;
	unsigned vertexIndexB;
	unsigned junctionIndexA;
	unsigned junctionIndexB;
	VKTileKey* junctionA;
	VKTileKey* junctionB;
} XXStruct_E6zS0B;

typedef struct TrafficSegment {
	RouteCalibration _field1;
	BOOL _field2;
} TrafficSegment;

typedef struct Record {
	unsigned _field1;
	unsigned _field2;
	float _field3;
	float _field4;
	long long _field5;
	int _field6;
	float _field7;
	float _field8;
} Record;

template<>
struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record* __first_;
};

template<>
struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record* __begin_;
	Record* __end_;
	__compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > __end_cap_;
};

typedef struct TrafficSkeletonTile {
	vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > m_records;
} TrafficSkeletonTile;

typedef struct Flow {
	long long _field1;
	float _field2;
	float _field3;
	int _field4;
} Flow;

typedef struct VKRibbonMakerData_t {
	id _field1;
	id _field2;
	BOOL _field3;
	float _field4;
	float _field5;
	BOOL _field6;
	float _field7;
	BOOL _field8;
	BOOL _field9;
	BOOL _field10;
} VKRibbonMakerData_t;

template<>
struct __compressed_pair<GEOVectorTilePoint *, vk_allocator<GEOVectorTilePoint> > {
	VKTileKey* _field1;
};

template<>
struct vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint> > {
	VKTileKey* _field1;
	VKTileKey* _field2;
	__compressed_pair<GEOVectorTilePoint *, vk_allocator<GEOVectorTilePoint> > _field3;
};

typedef struct TrafficAccum {
	int _field1;
	vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint> > _field2;
	int _field3;
	int _field4;
	int _field5;
	id _field6;
	int _field7;
	VKTileKey* _field8;
	int _field9;
	float _field10;
} TrafficAccum;

typedef struct {
	float _field1;
	XXStruct_$zuyAD _field2;
	XXStruct_$zuyAD _field3;
	XXStruct_$zuyAD _field4;
	XXUnion_euT3yD _field5;
	id _field6;
	id _field7;
	id _field8;
	int _field9;
} XXStruct_hcpPaD;

typedef struct _VKRealisticPolygonMetaData* VKRealisticPolygonMetaDataRef;

template<>
struct __compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData> > {
	VKRealisticPolygonMetaDataRef __first_;
};

template<>
struct vector<_VKRealisticPolygonMetaData, vk_allocator<_VKRealisticPolygonMetaData> > {
	VKRealisticPolygonMetaDataRef __begin_;
	VKRealisticPolygonMetaDataRef __end_;
	__compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData> > __end_cap_;
};

typedef struct __CFSet* CFSetRef;

typedef struct {
	XXStruct_ZUkpeA _field1;
	CGSize _field2;
	XXStruct_ZUkpeA _field3;
} XXStruct_2MlE6D;

typedef struct Label Label;

typedef struct __shared_weak_count shared_weak_count;

template<>
struct shared_ptr<vk::Label> {
	Label* __ptr_;
	shared_weak_count* __cntrl_;
};

template<>
struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > {
	shared_ptr<vk::Label>* __first_;
};

template<>
struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > {
	shared_ptr<vk::Label>* __begin_;
	shared_ptr<vk::Label>* __end_;
	__compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > __end_cap_;
};

typedef struct LabelFeatureTileData LabelFeatureTileData;
typedef struct LabelFeature {
	/*function-pointer*/ void** _field1;
	vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > _field2;
	unsigned long long _field3;
	unsigned long long _field4;
	float _field5;
	unsigned _field6;
	id _field7;
	id _field8;
	int _field9;
	id _field10;
	shared_ptr<const vk::LabelFeatureText> _field11;
	LabelFeatureTileData* _field12;
	mutex _field13;
	LabelFeatureTileData* _field14;
	int _field15;
	bool _field16;
	bool _field17;
	bool _field18;
	bool _field19;
} LabelFeature;

typedef struct LabelFeatureText LabelFeatureText;

template<>
struct shared_ptr<const vk::LabelFeatureText> {
	LabelFeatureText* _field1;
	shared_weak_count* _field2;
};

struct LabelFeatureTileData LabelFeatureTileData;

typedef struct mutex {
	opaque_pthread_mutex_t _field1;
} mutex;

template<>
struct list_node<void *> {
	list_node<void* >* next_;
	list_node<void* >* prev_;
};

typedef struct VGLFontAtlasCell {
	int _field1;
	Vector2i _field2;
	unsigned _field3;
	VKTileKey* _field4;
	list_node<void* >* _field5;
	list_node<void* >* _field6;
} VGLFontAtlasCell;

typedef struct root_plus_size {
	unsigned long size_;
	list_node<void *> root_;
} root_plus_size;

typedef struct data_t {
	root_plus_size root_plus_size_;
} data_t;

template<>
struct list<VGLFontAtlasCell, boost::intrusive::none, boost::intrusive::none, boost::intrusive::none> {
	data_t data_;
};

typedef struct VGLFontGlyphQuad_struct* VGLFontGlyphQuad_structRef;

template<>
struct __compressed_pair<VGLFontGlyphQuad_struct *, vk_allocator<VGLFontGlyphQuad_struct> > {
	VGLFontGlyphQuad_structRef _field1;
};

template<>
struct vector<VGLFontGlyphQuad_struct, vk_allocator<VGLFontGlyphQuad_struct> > {
	VGLFontGlyphQuad_structRef _field1;
	VGLFontGlyphQuad_structRef _field2;
	__compressed_pair<VGLFontGlyphQuad_struct *, vk_allocator<VGLFontGlyphQuad_struct> > _field3;
};

typedef struct CGFont* CGFontRef;

typedef struct VGLFontGlyph_struct {
	unsigned short _field1;
	BOOL _field2;
	UIEdgeInsets _field3;
	CGFontRef _field4;
	float _field5;
	float _field6;
	float _field7;
	struct {
		CGSize _field1;
		void* _field2;
		VGLFontAtlasCell* _field3;
		UIEdgeInsets _field4;
		UIEdgeInsets _field5;
	} _field8;
} VGLFontGlyph_struct;

typedef struct {
	XXStruct_taVrlB position;
	XXStruct_taVrlB tangent;
	BOOL tangentValid;
} XXStruct_mZDghA;

typedef struct VGLMeshNode* VGLMeshNodeRef;

template<>
struct shared_ptr<VGLMeshNode> {
	VGLMeshNodeRef __ptr_;
	shared_weak_count* __cntrl_;
};

typedef struct VGLMeshLeafNode* VGLMeshLeafNodeRef;

template<>
struct __compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode> > {
	VGLMeshLeafNodeRef __first_;
};

template<>
struct vector<VGLMeshLeafNode, vk_allocator<VGLMeshLeafNode> > {
	VGLMeshLeafNodeRef __begin_;
	VGLMeshLeafNodeRef __end_;
	__compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode> > __end_cap_;
};

template<>
struct bitset<64> {
	unsigned long __first_[2];
};

template<>
struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long* __first_;
};

template<>
struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long* __begin_;
	unsigned long* __end_;
	__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
};

template<>
struct dynamic_bitset<unsigned long, std::__1::allocator<unsigned long> > {
	vector<unsigned long, std::__1::allocator<unsigned long> > m_bits;
	unsigned m_num_bits;
};

typedef struct {
	float _a;
	unsigned _b;
	unsigned _g;
	unsigned _r;
} XXStruct_aaeKaB;

typedef struct {
	XXStruct_aaeKaB _color;
	float _offsetX;
	float _offsetY;
	float _size;
	struct {
		unsigned offsetX : 1;
		unsigned offsetY : 1;
	} _has;
} XXStruct_TvaKlA;

typedef struct {
	XXStruct_aaeKaB _color;
	float _width;
} XXStruct_GaQqgA;

typedef struct Longitude {
	unsigned _field1;
} Longitude;

typedef struct Latitude {
	unsigned _field1;
} Latitude;

typedef struct GeoCoordinates {
	Longitude _field1;
	Latitude _field2;
} GeoCoordinates;

typedef struct __long {
	unsigned _field1;
	unsigned _field2;
	char* _field3;
} long;

typedef struct __short {
	union {
		unsigned char _field1;
		BOOL _field2;
	} _field1;
	BOOL _field2[11];
} short;

typedef struct __raw {
	unsigned long _field1[3];
} raw;

typedef struct __rep {
	union {
		long _field1;
		short _field2;
		raw _field3;
	} _field1;
} rep;

template<>
struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > {
	rep _field1;
};

typedef struct String {
	__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > _field1;
} String;

typedef struct Incident {
	GeoCoordinates _field1;
	String _field2;
	String _field3;
	int _field4;
	String _field5;
	String _field6;
	long long _field7;
	long long _field8;
	long long _field9;
	int _field10;
	unsigned char _field11;
	bool _field12;
} Incident;

typedef struct __CTLine* CTLineRef;

typedef struct ViewTransform {
	/*function-pointer*/ void** _field1;
	int _field2;
	XXStruct_taVrlB _field3;
	XXStruct_taVrlB _field4;
	XXStruct_taVrlB _field5;
	float _field6;
	float _field7;
	bool _field8;
	float _field9;
	double _field10;
	XXStruct_$zuyAD _field11;
	XXStruct_$zuyAD _field12;
	XXStruct_$zuyAD _field13;
	id _field14;
	float _field15;
	bool _field16;
	XXStruct_taVrlB _field17;
	XXStruct_taVrlB _field18;
	double _field19;
	double _field20;
	CGSize _field21;
	float _field22;
	XXStruct_TVSAjA _field23;
	XXStruct_taVrlB _field24;
	XXStruct_taVrlB _field25;
} ViewTransform;

typedef struct LabelContext {
	id _field1;
	id _field2;
	id _field3;
	id _field4;
	ViewTransform* _field5;
	int _field6;
	int _field7;
	unsigned _field8;
	float _field9;
	bool _field10;
	bool _field11;
	bool _field12;
	bool _field13;
	bool _field14;
	bool _field15;
	int _field16;
	XXStruct_HKaJvA _field17;
	UIEdgeInsets _field18;
	UIEdgeInsets _field19;
	UIEdgeInsets _field20;
	int _field21;
} LabelContext;

typedef struct CollisionObject {
	Label* _field1;
	int _field2;
	UIEdgeInsets _field3;
	UIEdgeInsets _field4;
	VKTileKey* _field5;
	VKTileKey* _field6;
	unsigned _field7;
} CollisionObject;

template<>
struct __compressed_pair<vk::CollisionObject **, vk_allocator<vk::CollisionObject *> > {
	CollisionObject** __first_;
};

template<>
struct vector<vk::CollisionObject *, vk_allocator<vk::CollisionObject *> > {
	CollisionObject** __begin_;
	CollisionObject** __end_;
	__compressed_pair<vk::CollisionObject **, vk_allocator<vk::CollisionObject *> > __end_cap_;
};

typedef struct SapEntry SapEntry;

template<>
struct __compressed_pair<vk::SapEntry *, vk_allocator<vk::SapEntry> > {
	SapEntry* __first_;
};

template<>
struct vector<vk::SapEntry, vk_allocator<vk::SapEntry> > {
	SapEntry* __begin_;
	SapEntry* __end_;
	__compressed_pair<vk::SapEntry *, vk_allocator<vk::SapEntry> > __end_cap_;
};

typedef struct SapOverlap SapOverlap;

template<>
struct __compressed_pair<vk::SapOverlap *, vk_allocator<vk::SapOverlap> > {
	SapOverlap* __first_;
};

template<>
struct vector<vk::SapOverlap, vk_allocator<vk::SapOverlap> > {
	SapOverlap* __begin_;
	SapOverlap* __end_;
	__compressed_pair<vk::SapOverlap *, vk_allocator<vk::SapOverlap> > __end_cap_;
};

typedef struct LabelCollider {
	vector<vk::CollisionObject *, vk_allocator<vk::CollisionObject *> > _objects;
	vector<vk::SapEntry, vk_allocator<vk::SapEntry> > _axisY;
	vector<vk::SapOverlap, vk_allocator<vk::SapOverlap> > _overlaps;
} LabelCollider;

template<>
struct weak_ptr<altitude::LabelData>;

template<>
struct __compressed_pair<std::__1::weak_ptr<altitude::LabelData> *, vk_allocator<std::__1::weak_ptr<altitude::LabelData>> > {
	weak_ptr<altitude::LabelData>* __first_;
};

template<>
struct vector<std::__1::weak_ptr<altitude::LabelData>, vk_allocator<std::__1::weak_ptr<altitude::LabelData>> > {
	weak_ptr<altitude::LabelData>* __begin_;
	weak_ptr<altitude::LabelData>* __end_;
	__compressed_pair<std::__1::weak_ptr<altitude::LabelData> *, vk_allocator<std::__1::weak_ptr<altitude::LabelData>> > __end_cap_;
};

template<>
struct weak_ptr<altitude::TrafficTile>;

template<>
struct __compressed_pair<std::__1::weak_ptr<altitude::TrafficTile> *, vk_allocator<std::__1::weak_ptr<altitude::TrafficTile>> > {
	weak_ptr<altitude::TrafficTile>* __first_;
};

template<>
struct vector<std::__1::weak_ptr<altitude::TrafficTile>, vk_allocator<std::__1::weak_ptr<altitude::TrafficTile>> > {
	weak_ptr<altitude::TrafficTile>* __begin_;
	weak_ptr<altitude::TrafficTile>* __end_;
	__compressed_pair<std::__1::weak_ptr<altitude::TrafficTile> *, vk_allocator<std::__1::weak_ptr<altitude::TrafficTile>> > __end_cap_;
};

typedef struct VKPerformanceTestResult_struct {
	char* _field1;
	float _field2[5];
} VKPerformanceTestResult_struct;

typedef struct VKRouteLineSection {
	vector<VKRouteMapMatchingSection::Vertex, vk_allocator<VKRouteMapMatchingSection::Vertex> > _field1;
	bool _field2;
	float _field3;
	float _field4;
	list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *> > _field5;
	VKPolylineWalker _field6;
	VKRouteLineToMeshPathMap _field7;
	RouteCalibration _field8;
	RouteCalibration _field9;
} VKRouteLineSection;

template<>
struct __compressed_pair<VKRouteLineSection *, vk_allocator<VKRouteLineSection> > {
	VKRouteLineSection* __first_;
};

template<>
struct vector<VKRouteLineSection, vk_allocator<VKRouteLineSection> > {
	VKRouteLineSection* __begin_;
	VKRouteLineSection* __end_;
	__compressed_pair<VKRouteLineSection *, vk_allocator<VKRouteLineSection> > __end_cap_;
};

template<>
struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>;

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > {
	__compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > {
	__hash_node<std::__1::pair<GEOMultiSectionFeature* , VKRouteLineFeature>, void* >** __first_;
	__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> {
	__hash_node<std::__1::pair<GEOMultiSectionFeature* , VKRouteLineFeature>, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true>, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true> > __p3_;
};

template<>
struct unordered_map<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, std::__1::equal_to<GEOMultiSectionFeature *>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *const, VKRouteLineFeature>> > {
	__hash_table<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true>, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>> > __table_;
};

typedef struct VKRouteLineFeatureCache {
	unordered_map<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, std::__1::equal_to<GEOMultiSectionFeature *>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *const, VKRouteLineFeature>> > _map;
	XXStruct_HKaJvA _routeLineRect;
} VKRouteLineFeatureCache;

template<>
struct __compressed_pair<VKRouteMapMatchingSection::Vertex *, vk_allocator<VKRouteMapMatchingSection::Vertex> > {
	Vertex* _field1;
};

template<>
struct vector<VKRouteMapMatchingSection::Vertex, vk_allocator<VKRouteMapMatchingSection::Vertex> > {
	Vertex* _field1;
	Vertex* _field2;
	__compressed_pair<VKRouteMapMatchingSection::Vertex *, vk_allocator<VKRouteMapMatchingSection::Vertex> > _field3;
};

template<>
struct __list_node<VGLRouteLineMesh *, void *>;

template<>
struct __list_node_base<VGLRouteLineMesh *, void *> {
	__list_node<VGLRouteLineMesh* , void* >* _field1;
	__list_node<VGLRouteLineMesh* , void* >* _field2;
};

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VGLRouteLineMesh *, void *>> > {
	unsigned long _field1;
};

template<>
struct list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *> > {
	__list_node_base<VGLRouteLineMesh *, void *> _field1;
	__compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VGLRouteLineMesh *, void *>> > _field2;
};

typedef struct VKPolylineWalker {
	char* _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} VKPolylineWalker;

template<>
struct __list_node<VKRouteLineToMeshPathMap::Range, void *>;

template<>
struct __list_node_base<VKRouteLineToMeshPathMap::Range, void *> {
	__list_node<VKRouteLineToMeshPathMap::Range, void* >* _field1;
	__list_node<VKRouteLineToMeshPathMap::Range, void* >* _field2;
};

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VKRouteLineToMeshPathMap::Range, void *>> > {
	unsigned long _field1;
};

template<>
struct list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range> > {
	__list_node_base<VKRouteLineToMeshPathMap::Range, void *> _field1;
	__compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VKRouteLineToMeshPathMap::Range, void *>> > _field2;
};

template<>
struct __list_iterator<VKRouteLineToMeshPathMap::Range, void *> {
	__list_node<VKRouteLineToMeshPathMap::Range, void* >* _field1;
};

typedef struct VKRouteLineToMeshPathMap {
	list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range> > _field1;
	__list_iterator<VKRouteLineToMeshPathMap::Range, void *> _field2;
} VKRouteLineToMeshPathMap;

typedef struct VKGlobeStylesheet* VKGlobeStylesheetRef;

template<>
struct shared_ptr<VKGlobeStylesheet> {
	VKGlobeStylesheetRef __ptr_;
	shared_weak_count* __cntrl_;
};

typedef struct AltitudeDebugSettings {
	BOOL altitudePauseLoading;
	BOOL altitudeShowTileBounds;
	float lodScale;
	float animationSpinTime;
} AltitudeDebugSettings;

template<>
struct shared_ptr<bool> {
	bool* __ptr_;
	shared_weak_count* __cntrl_;
};

typedef struct GlobeView {
	/*function-pointer*/ void** _field1;
} GlobeView;

typedef struct __CTFont* CTFontRef;

typedef struct LabelFeatureRoad LabelFeatureRoad;

template<>
struct LabelFeatureArray<vk::LabelFeatureRoad> {
	unsigned _field1;
	unsigned _field2;
	LabelFeatureRoad** _field3;
	bool _field4;
	id _field5;
	bool _field6;
};

typedef struct LabelFeaturePoint LabelFeaturePoint;

template<>
struct LabelFeatureArray<vk::LabelFeaturePoint> {
	unsigned _field1;
	unsigned _field2;
	LabelFeaturePoint** _field3;
	bool _field4;
	id _field5;
	bool _field6;
};

typedef struct LabelFeaturePolygon LabelFeaturePolygon;

template<>
struct LabelFeatureArray<vk::LabelFeaturePolygon> {
	unsigned _field1;
	unsigned _field2;
	LabelFeaturePolygon** _field3;
	bool _field4;
	id _field5;
	bool _field6;
};

typedef struct TrafficWalking {
	double _field1;
	int _field2;
	int _field3;
	unsigned* _field4;
	unsigned* _field5;
} TrafficWalking;

template<>
struct __tree_node<std::__1::pair<VKPolylineOverlay *, unsigned int>, void *>;

template<>
struct __tree_node_base<void *>;

template<>
struct __tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void* >* __left_;
};

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, unsigned int>, void *>> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::pair<VKPolylineOverlay *, unsigned int>, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, unsigned int>> > {
	__tree_node<std::__1::pair<VKPolylineOverlay* , unsigned int>, void* >* __begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, unsigned int>, void *>> > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true> > __pair3_;
};

template<>
struct map<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, vk_allocator<std::__1::pair<VKPolylineOverlay *const, unsigned int>> > {
	__tree<std::__1::pair<VKPolylineOverlay *, unsigned int>, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, unsigned int>> > __tree_;
};

typedef struct VKGlobeRouteSplit {
	/*function-pointer*/ void** _field1;
	id _field2;
} VKGlobeRouteSplit;

typedef struct RouteJunctionInfo RouteJunctionInfo;

template<>
struct __compressed_pair<RouteJunctionInfo *, vk_allocator<RouteJunctionInfo> > {
	RouteJunctionInfo* _field1;
};

template<>
struct vector<RouteJunctionInfo, vk_allocator<RouteJunctionInfo> > {
	RouteJunctionInfo* _field1;
	RouteJunctionInfo* _field2;
	__compressed_pair<RouteJunctionInfo *, vk_allocator<RouteJunctionInfo> > _field3;
};

typedef struct TrafficDynamicTile TrafficDynamicTile;

template<>
struct shared_ptr<zilch::TrafficDynamicTile> {
	TrafficDynamicTile* __ptr_;
	shared_weak_count* __cntrl_;
};

template<>
struct __hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>;

template<>
struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	__compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>> > {
	__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow* >, void* >** __first_;
	__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> {
	__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow* >, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true> > __p3_;
};

template<>
struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, vk_allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>> > {
	__hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>> > __table_;
};

template<>
struct __compressed_pair<VKMapTile **, vk_allocator<VKMapTile *> > {
	id* __first_;
};

template<>
struct vector<VKMapTile *, vk_allocator<VKMapTile *> > {
	id* __begin_;
	id* __end_;
	__compressed_pair<VKMapTile **, vk_allocator<VKMapTile *> > __end_cap_;
};

template<>
struct __compressed_pair<VGLRect *, vk_allocator<VGLRect> > {
	VKTileKey* __first_;
};

template<>
struct vector<VGLRect, vk_allocator<VGLRect> > {
	VKTileKey* __begin_;
	VKTileKey* __end_;
	__compressed_pair<VGLRect *, vk_allocator<VGLRect> > __end_cap_;
};

typedef struct {
	int blendMode;
	float opacity;
} XXStruct_h4Ho9B;

template<>
struct __compressed_pair<unsigned int *, vk_allocator<unsigned int> > {
	unsigned* _field1;
};

template<>
struct vector<unsigned int, vk_allocator<unsigned int> > {
	unsigned* _field1;
	unsigned* _field2;
	__compressed_pair<unsigned int *, vk_allocator<unsigned int> > _field3;
};

template<>
struct shared_ptr<VGLTextMeshVAO>;

template<>
struct __compressed_pair<std::__1::shared_ptr<VGLTextMeshVAO> *, vk_allocator<std::__1::shared_ptr<VGLTextMeshVAO>> > {
	shared_ptr<VGLTextMeshVAO>* __first_;
};

template<>
struct vector<std::__1::shared_ptr<VGLTextMeshVAO>, vk_allocator<std::__1::shared_ptr<VGLTextMeshVAO>> > {
	shared_ptr<VGLTextMeshVAO>* __begin_;
	shared_ptr<VGLTextMeshVAO>* __end_;
	__compressed_pair<std::__1::shared_ptr<VGLTextMeshVAO> *, vk_allocator<std::__1::shared_ptr<VGLTextMeshVAO>> > __end_cap_;
};

typedef struct {
	shared_ptr<vk::Label> _field1;
	unsigned _field2;
	unsigned _field3;
} XXStruct_qLOmoA;

template<>
struct __compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment> > {
	TrafficSegment* __first_;
};

template<>
struct vector<TrafficSegment, vk_allocator<TrafficSegment> > {
	TrafficSegment* __begin_;
	TrafficSegment* __end_;
	__compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment> > __end_cap_;
};

typedef struct LabelNavJunctionInfo LabelNavJunctionInfo;

template<>
struct __compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo* __first_;
};

template<>
struct vector<LabelNavJunctionInfo, vk_allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo* __begin_;
	LabelNavJunctionInfo* __end_;
	__compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo> > __end_cap_;
};

template<>
struct __hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>> > {
	__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct* >, void* >** __first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> {
	__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct* >, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<<anonymous>::GlyphCacheKey>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<<anonymous>::GlyphCacheKey>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, std::__1::__unordered_map_hasher<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<<anonymous>::GlyphCacheKey>, true>, std::__1::__unordered_map_equal<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<<anonymous>::GlyphCacheKey>, true>, std::__1::allocator<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<<anonymous>::GlyphCacheKey>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<<anonymous>::GlyphCacheKey>, true> > __p3_;
};

template<>
struct unordered_map<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<<anonymous>::GlyphCacheKey>, std::__1::equal_to<<anonymous>::GlyphCacheKey>, std::__1::allocator<std::__1::pair<const <anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>> > {
	__hash_table<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, std::__1::__unordered_map_hasher<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<<anonymous>::GlyphCacheKey>, true>, std::__1::__unordered_map_equal<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<<anonymous>::GlyphCacheKey>, true>, std::__1::allocator<std::__1::pair<<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>> > __table_;
};

template<>
struct __wrap_iter<VGLFontGlyphQuad_struct *> {
	VGLFontGlyphQuad_structRef _field1;
};

typedef struct {
	unsigned _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
} XXStruct_0cBcmA;


