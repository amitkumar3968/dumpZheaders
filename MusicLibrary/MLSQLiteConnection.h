/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import </libobjc.A.h>

@class NSHashTable, NSMutableArray, CPLRUDictionary, MLSQLiteConnectionQueue, NSString;
@protocol MLSQLiteConnectionSQLiteDelegate, OS_dispatch_queue;

@interface MLSQLiteConnection : NSObject {
@private
	NSString* _path;
	NSHashTable* _registeredStatements;
	NSMutableArray* _registeredFunctions;
	NSMutableArray* _registeredModules;
	CPLRUDictionary* _statementCache;
	sqlite3* _db;
	unsigned _writeStatementCount;
	unsigned _busyHandlingCounter;
	int _openFlags;
	int _activeTransactionKind;
	int _profilingLevel;
	BOOL _activeTransactionHasWrites;
	NSObject<OS_dispatch_queue>* _queue;
	MLSQLiteConnectionQueue* _connectionQueue;
	id<MLSQLiteConnectionSQLiteDelegate> _SQLiteDelegate;
}
@property(assign, nonatomic) __weak id<MLSQLiteConnectionSQLiteDelegate> SQLiteDelegate;	// @synthesize=_SQLiteDelegate
@property(readonly, assign, nonatomic) sqlite3* db;
@property(readonly, assign, nonatomic) NSString* path;
@property(assign, nonatomic) int profilingLevel;	// @synthesize=_profilingLevel
@property(readonly, assign, nonatomic) int activeTransactionKind;	// @synthesize=_activeTransactionKind
@property(readonly, assign, nonatomic) BOOL activeTransactionHasWrites;	// @synthesize=_activeTransactionHasWrites
@property(retain, nonatomic) MLSQLiteConnectionQueue* connectionQueue;	// @synthesize=_connectionQueue
// declared property setter: -(void)setConnectionQueue:(id)queue;
// declared property getter: -(id)connectionQueue;
// declared property setter: -(void)setSQLiteDelegate:(id)delegate;
// declared property getter: -(id)SQLiteDelegate;
// declared property getter: -(int)profilingLevel;
// declared property getter: -(int)activeTransactionKind;
// declared property getter: -(BOOL)activeTransactionHasWrites;
-(void).cxx_destruct;
-(BOOL)enumerateRowsWithSQL:(id)sql parameters:(id)parameters handler:(id)handler;
-(BOOL)enumerateRowsWithSQL:(id)sql valueHandler:(id)handler;
-(BOOL)enumerateRowsWithSQL:(id)sql handler:(id)handler;
-(BOOL)runSQL:(id)sql;
-(void)statementWithSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;
-(id)statementWithSQL:(id)sql;
-(BOOL)performTransactionKind:(int)kind withBusyHandler:(id)busyHandler block:(id)block;
-(BOOL)performTransactionKind:(int)kind withBlock:(id)block;
-(BOOL)performTransactionWithBlock:(id)block;
-(BOOL)deleteDatabase;
-(BOOL)endTransactionWithBusyHandler:(id)busyHandler;
-(BOOL)endTransaction;
-(BOOL)rollbackTransactionWithBusyHandler:(id)busyHandler;
-(BOOL)commitTransactionWithBusyHandler:(id)busyHandler;
-(BOOL)beginTransactionKind:(int)kind withBusyHandler:(id)busyHandler;
// declared property setter: -(void)setProfilingLevel:(int)level;
-(void)close;
-(id)initForWritingWithPath:(id)path;
-(id)initForReadingWithPath:(id)path;
-(id)initForWritingWithURL:(id)url;
-(id)initForReadingWithURL:(id)url;
-(void)disableBusyHandling;
-(void)enableBusyHandling;
-(void)incrementWriteStatementRunCount;
-(void)unregisterStatement:(id)statement;
-(void)registerStatement:(id)statement;
-(void)registerModuleName:(id)name moduleMethods:(const sqlite3_module*)methods;
-(void*)moduleContextForModuleName:(id)moduleName;
-(void)setModuleContext:(void*)context forModuleName:(id)moduleName contextReleaseBlock:(id)block;
-(void)_addRegisteredModule:(id)module name:(id)name;
-(id)_registeredModuleNamed:(id)named;
-(void)registerFunctionName:(id)name argumentCount:(int)count function:(/*function-pointer*/ void*)function;
-(void)registerFunctionName:(id)name argumentCount:(int)count block:(id)block;
// declared property getter: -(sqlite3*)db;
-(void)dealloc;
-(void)_incrementalVaccuumIfAppropriate;
-(void)_addRegisteredFunction:(id)function name:(id)name argumentCount:(int)count;
-(id)_endStatement;
-(id)_rollbackStatement;
-(id)_commitStatement;
-(id)_beginImmediateStatement;
-(id)_beginStatement;
-(id)description;
// declared property getter: -(id)path;
-(id)_initWithFlags:(int)flags path:(id)path;
-(void)statementWithSQLPrefix:(id)sqlprefix inPersistentIDs:(const long long*)persistentIDs count:(unsigned)count usingBlock:(id)block;
@end

