/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import </libobjc.A.h>
#import "MusicLibrary-Structs.h"

@class ML3MusicLibrary;

@interface ML3Entity : NSObject {
@private
	ML3MusicLibrary* _library;
	long long _persistentID;
}
@property(readonly, assign) BOOL existsInLibrary;
@property(readonly, assign) long long persistentID;	// @synthesize=_persistentID
@property(assign) __weak ML3MusicLibrary* library;	// @synthesize=_library
+(void)enumeratePersistentIDsInLibrary:(id)library afterRevision:(long long)revision usingBlock:(id)block;
+(int)revisionTrackingCode;
+(id)orderingSQLForProperties:(id)properties directionality:(id)directionality;
+(id)indexableSQLForProperties:(id)properties;
+(id)disambiguatedSQLForProperty:(id)property;
+(void)predisambiguateProperties:(id)properties toDictionary:(id)dictionary;
+(id)allProperties;
+(id)predisambiguatedProperties;
+(id)collectionClassesToUpdateBeforeDelete;
+(id)persistentIDColumnForTable:(id)table;
+(id)extraTablesToInsert;
+(id)extraTablesToDelete;
+(BOOL)deleteFromLibrary:(id)library deletionType:(int)type persistentIDs:(const long long*)ids count:(unsigned)count;
+(BOOL)_deleteRowForPersistentIDs:(const long long*)persistentIDs count:(unsigned)count library:(id)library table:(id)table usingColumn:(id)column;
+(BOOL)libraryDynamicChangeForProperty:(id)property;
+(BOOL)libraryContentsChangeForProperty:(id)property;
+(id)foreignPropertyForProperty:(id)property entityClass:(Class)aClass;
+(id)foreignColumnForProperty:(id)property;
+(id)foreignDatabaseTableForProperty:(id)property;
+(id)sectionPropertyForProperty:(id)property;
+(id)defaultOrderingProperties;
+(id)newWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;
+(id)newWithDictionary:(id)dictionary inLibrary:(id)library;
+(id)newWithPersistentID:(long long)persistentID inLibrary:(id)library;
+(id)joinClausesForProperty:(id)property;
+(id)newSelectSQLForProperties:(const id*)properties count:(unsigned)count predicate:(id)predicate;
+(id)subselectPropertyForProperty:(id)property;
+(id)subselectStatementForProperty:(id)property;
+(void)enumeratePersistentIDsInLibrary:(id)library matchingPredicate:(id)predicate orderingTerms:(id)terms persistentIDs:(const long long*)ids count:(unsigned)count usingBlock:(id)block;
+(BOOL)insertionChangesLibraryContents;
+(BOOL)incrementRevisionWithLibrary:(id)library persistentID:(long long)anId deletionType:(int)type revisionType:(int)type4;
+(id)unsettableProperties;
+(BOOL)insertValues:(id)values intoTable:(id)table persistentID:(long long)anId library:(id)library;
+(id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms usingSections:(BOOL)sections;
+(id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms propertyToCount:(id)count;
+(id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms;
+(id)directCollectionQueryWithAggregateQuery:(id)aggregateQuery predicate:(id)predicate usingSections:(BOOL)sections;
+(id)queryWithLibrary:(id)library predicate:(id)predicate orderingProperties:(id)properties usingSections:(BOOL)sections;
+(id)queryWithLibrary:(id)library predicate:(id)predicate usingSections:(BOOL)sections;
+(id)queryWithLibrary:(id)library predicate:(id)predicate orderingProperties:(id)properties;
+(id)queryWithLibrary:(id)library predicate:(id)predicate;
+(id)anyInLibrary:(id)library predicate:(id)predicate;
+(id)aggregateQueryWithUnitQuery:(id)unitQuery foreignPersistentIDProperty:(id)property;
+(id)replacerWithProperties:(id)properties databaseConnection:(id)connection;
// declared property getter: -(long long)persistentID;
// declared property setter: -(void)setLibrary:(id)library;
// declared property getter: -(id)library;
-(void).cxx_destruct;
-(void)incrementRevision;
-(BOOL)deleteFromLibrary;
-(void)didChangeValueForProperties:(const id*)properties count:(unsigned)count;
-(BOOL)setValue:(id)value forProperty:(id)property;
-(BOOL)setValuesForPropertiesWithDictionary:(id)dictionary;
-(BOOL)setValues:(const id*)values forProperties:(const id*)properties count:(unsigned)count;
-(id)valueForProperty:(id)property;
-(void)getValues:(id*)values forProperties:(id*)properties count:(unsigned)count;
-(BOOL)matchesPredicate:(id)predicate;
// declared property getter: -(BOOL)existsInLibrary;
-(id)description;
-(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
-(id)copyInLibrary:(id)library;
-(id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;
-(id)initWithPersistentID:(long long)persistentID inLibrary:(id)library;
@end

