/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import </libobjc.A.h>

@class NSString, ML3DatabaseMetadata, ML3NondurableWriteSet, ML3UbiquitousDatabase, MLSQLiteConnection, ML3Container, NSMutableArray, NSCountedSet, ML3MusicLibrary_SQLiteDatabaseContext, NSArray, ML3SqliteDatabase;
@protocol OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject {
@private
	NSString* _path;
	BOOL _enableWrites;
	ML3MusicLibrary_SQLiteDatabaseContext* _mainDatabaseContext;
	ML3MusicLibrary_SQLiteDatabaseContext* _backgroundDatabaseContext;
	MLSQLiteConnection* _inMemoryDatabaseConnection;
	NSObject<OS_dispatch_queue>* _atomicityQueue;
	NSMutableArray* _artworkConversionCompletionHandlers;
	NSString* _artworkConverterPIDNotifyName;
	int _artworkConverterPIDToken;
	BOOL _isConvertingArtwork;
	ML3UbiquitousDatabase* _ubiquitousDatabase;
	ML3SqliteDatabase* _geniusDatabase;
	NSCountedSet* _notifyNamesToIgnore;
	NSMutableArray* _pendingNotifyPostNames;
	NSString* _notifyName;
	int _notifyToken;
	NSString* _nonContentsNotifyName;
	int _nonContentsNotifyToken;
	NSString* _invisiblePropertyNotifyName;
	int _invisiblePropertyNotifyToken;
	NSString* _displayValuesNotifyName;
	int _displayValuesNotifyToken;
	NSString* _syncGenerationNotifyName;
	int _syncGenerationNotifyToken;
	NSString* _libraryUIDNotifyName;
	int _libraryUIDNotifyToken;
	BOOL _requiresProcessAssertion;
	int _backupDisabledCount;
	BOOL _backupNeeded;
	BOOL _hasEverConnectedToDatabase;
	id _mcSettingsObserver;
	id _loggingObserver;
	NSObject<OS_dispatch_queue>* _nondurableConcurrentQueue;
	ML3NondurableWriteSet* _nondurableWriteSet;
	NSString* _artworkDirectory;
	BOOL _artworkDirectoryFilesystemRepresentation[1024];
	BOOL _hasEverConnectedTo;
	BOOL _keepPresignedValidyAfterVerification;
}
@property(assign, nonatomic) BOOL keepPresignedValidyAfterVerification;	// @synthesize=_keepPresignedValidyAfterVerification
@property(readonly, assign) long long autoFilledTracksTotalSize;
@property(assign) long long syncGenerationID;
@property(readonly, assign) long long currentContentRevision;
@property(readonly, assign) long long currentRevision;
@property(readonly, assign) long long persistentID;
@property(readonly, assign, nonatomic) BOOL hasEverConnectedToDatabase;	// @synthesize=_hasEverConnectedTo
@property(readonly, assign) BOOL requiresArtworkConversionPostProcessing;
@property(readonly, assign) BOOL requiresPostProcessing;
@property(readonly, assign) BOOL mediaRestrictionEnabled;
@property(readonly, assign) NSArray* preferredSubtitleTracks;
@property(readonly, assign) NSArray* preferredAudioTracks;
@property(readonly, assign) ML3DatabaseMetadata* databaseInfo;
@property(readonly, assign) ML3Container* purchasedTracksPlaylist;
@property(readonly, assign) NSArray* localizedSectionIndexTitles;
@property(readonly, assign, nonatomic, getter=isNondurableWritingActive) BOOL nondurableWritingActive;
@property(readonly, assign, nonatomic) BOOL writable;
@property(readonly, assign) NSString* path;	// @synthesize=_path
@property(retain) id libraryUID;	// converted property
@property(readonly, retain) ML3UbiquitousDatabase* ubiquitousDatabase;	// converted property
@property(readonly, retain) ML3SqliteDatabase* geniusDatabase;	// converted property
+(BOOL)hasArtworkConversionManifestTasksRemainingUsingConnection:(id)connection;
+(unsigned)numberOfArtworkStyles;
+(unsigned)readableArtworkFormatIDForArtworkFormatID:(unsigned)artworkFormatID;
+(MLArtworkFormatSpec)artworkFormatSpecForArtworkFormatID:(unsigned)artworkFormatID;
+(id)allArtworkFormatSizes;
+(id)_purgeableTrackPredicateWithUrgency:(int)urgency;
+(void)enumerateSortMapTablesUsingBlock:(id)block;
+(id)sectionIndexTitleForSectionHeader:(id)sectionHeader;
+(id)sectionIndexTitles;
+(id)localizedSectionIndexTitleForSectionHeader:(id)sectionHeader;
+(id)localizedSectionHeaderForSectionHeader:(id)sectionHeader;
+(BOOL)executeSQL:(id)sql usingHandle:(sqlite3*)handle;
+(void)_stepStatement:(sqlite3_stmt*)statement hasRow:(BOOL*)row didFinish:(BOOL*)finish;
+(BOOL)statementDidFinishAfterStepping:(sqlite3_stmt*)statement;
+(BOOL)statementHasRowAfterStepping:(sqlite3_stmt*)stepping;
+(id)_newDatabaseConnectionForPath:(id)path enableWrites:(BOOL)writes forLibrary:(id)library;
+(void)connection:(id)connection willCloseDBHandle:(sqlite3*)handle;
+(void)connection:(id)connection didOpenDBHandle:(sqlite3*)handle;
+(id)newDatabaseConnectionForPath:(id)path enableWrites:(BOOL)writes;
+(id)fallbackGeniusDatabaseFilePath;
+(id)geniusDatabaseFilePath;
+(id)mainDatabasePath;
+(BOOL)updateTrackIntegrityOnConnection:(id)connection;
+(id)sharedLibrary;
+(void)disableAutomaticDatabaseValidation;
+(BOOL)automaticDatabaseArtworkConversionEnabled;
+(void)disableAutomaticDatabaseArtworkConversion;
+(void)setImportationEnabled:(BOOL)enabled;
+(BOOL)importationEnabled;
+(void)initialize;
+(void)beginDatabaseMigrationIfNecessary;
+(BOOL)updateSortMapOnConnection:(id)connection;
+(BOOL)_inTransactionUpdateSearchMapOnConnection:(id)transactionUpdateSearchMapOnConnection;
+(BOOL)_inTransactionUpdateSortMapOnConnection:(id)transactionUpdateSortMapOnConnection forceUpdateOriginals:(BOOL)originals;
+(BOOL)createIndexesUsingConnection:(id)connection;
+(BOOL)dropIndexesUsingConnection:(id)connection;
+(BOOL)dropIndexesUsingConnection:(id)connection tableNames:(const char*)names;
+(BOOL)migrateToCurrentUserVersionUsingConnection:(id)currentUserVersionUsingConnection;
+(BOOL)orderingLanguageMatchesSystemUsingConnection:(id)connection;
+(BOOL)userVersionMatchesSystemUsingConnection:(id)connection;
+(int)userVersionUsingConnection:(id)connection;
+(id)systemCurrentLanguage;
+(BOOL)buildDatabaseTablesUsingConnection:(id)connection;
+(id)indexSchemaSQL;
+(id)itemIndexSchemaSQL;
+(id)allTables;
+(id)allSchemaSQL;
+(id)itemSchemaSQL;
+(id)sortMapSchemaSQL;
+(id)storeLinkSchemaSQL;
+(int)currentUserVersion;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base createParentFolderIfNecessary:(BOOL)necessary;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base isFolder:(BOOL*)folder;
+(id)controlDirectoryPathWithBasePath:(id)basePath;
+(id)mediaFolderRelativePath:(id)path;
+(id)mediaFolderPath;
// declared property setter: -(void)setKeepPresignedValidyAfterVerification:(BOOL)verification;
// declared property getter: -(BOOL)keepPresignedValidyAfterVerification;
// declared property getter: -(BOOL)hasEverConnectedToDatabase;
// declared property getter: -(id)path;
-(void).cxx_destruct;
-(void)removeOrphanedTracks;
-(void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)interval;
-(BOOL)_commitNondurableWrites;
-(BOOL)setValue:(id)value forDatabaseProperty:(id)databaseProperty;
-(id)valueForDatabaseProperty:(id)databaseProperty;
-(id)appleIDForDSID:(unsigned long long)dsid;
-(BOOL)setAppleID:(id)anId forDSID:(unsigned long long)dsid;
-(void)_accessAccountCacheDBForSQL:(id)sql usingBlock:(id)block;
-(void)convertAlbumListJPEGToBGRAWithNotificationInterval:(double)notificationInterval;
-(void)convertAlbumGridBGRA1xToJPEG1xWithNotificationInterval:(double)notificationInterval;
-(void)beginAutoConvertingArtworkFormats;
-(void)beginConvertingArtworkFormatsWithCompletionHandler:(id)completionHandler;
-(void)convertArtworkFormatsInBackground:(BOOL)background completionHandler:(id)handler;
-(void)_noteUnnecessaryConversionForDeviceTypeFromArtworkFormat:(unsigned)artworkFormat toArtworkFormat:(unsigned)artworkFormat2;
-(void)_convertArtworkInManifsetFromArtworkFormat:(unsigned)artworkFormat toArtworkFormat:(unsigned)artworkFormat2 notificationInterval:(double)interval;
-(BOOL)__convertArtworkCacheID:(id)anId fromArtworkFormat:(unsigned)artworkFormat toArtworkFormat:(unsigned)artworkFormat3 sourceOptions:(id)options colorSpace:(CGColorSpaceRef)space;
-(BOOL)convertLegacyArtworkFromArtworkBlobFilePath:(id)artworkBlobFilePath;
-(BOOL)compactArtwork;
-(BOOL)deleteArtworkForCacheID:(id)cacheID formatID:(unsigned)anId;
-(BOOL)deleteArtworkForCacheID:(id)cacheID formatID:(unsigned)anId deleteAllFromConversionTable:(BOOL)conversionTable;
-(BOOL)deleteArtworkForCacheID:(id)cacheID;
-(void)deleteFromArtworkConversionForCacheID:(id)cacheID fromFormatID:(unsigned)formatID toFormatID:(unsigned)formatID3;
-(BOOL)deleteAllArtwork;
-(BOOL)insertArtworkWithImageData:(id)imageData forCacheID:(id)cacheID;
-(BOOL)writeToDatabaseArtworkForCacheID:(id)cacheID length:(unsigned long)length formatID:(unsigned)anId imageSubRect:(CGRect)rect;
-(BOOL)writeToDiskArtworkWithImageData:(id)imageData forCacheID:(id)cacheID resultingLengths:(unsigned**)lengths formatIDs:(unsigned**)ids imageSubRects:(CGRect**)rects count:(unsigned*)count;
-(BOOL)hasArtworkForCacheID:(id)cacheID ensureArtworkFileExists:(BOOL)exists;
-(BOOL)hasArtworkForCacheID:(id)cacheID;
-(void)loadArtworkForCacheID:(id)cacheID formatID:(unsigned)anId completionHandler:(id)handler;
-(id)artworkDataForCacheID:(id)cacheID formatID:(unsigned)anId;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize urgency:(int)urgency respectSongMattress:(BOOL)mattress;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize urgency:(int)urgency;
-(long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize;
-(long long)autoFilledTracksTotalSizeWithUrgency:(int)urgency respectSongMattress:(BOOL)mattress;
-(long long)autoFilledTracksTotalSizeWithUrgency:(int)urgency;
// declared property getter: -(long long)autoFilledTracksTotalSize;
-(void)_enumeratePurgeableTracksForUrgency:(int)urgency respectSongMattress:(BOOL)mattress usingBlock:(id)block;
-(void)getChangedPersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(int)code usingBlock:(id)block;
-(BOOL)persistentID:(long long)anId changedAfterRevision:(long long)revision revisionTrackingCode:(int)code;
-(void)enumeratePersistentIDsAfterRevision:(long long)revision usingBlock:(id)block;
-(void)enumeratePersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned)code usingBlock:(id)block;
// converted property setter: -(void)setLibraryUID:(id)uid;
// converted property getter: -(id)libraryUID;
// declared property getter: -(long long)syncGenerationID;
// declared property setter: -(void)setSyncGenerationID:(long long)anId;
// declared property getter: -(long long)currentContentRevision;
// declared property getter: -(long long)currentRevision;
// declared property getter: -(long long)persistentID;
-(BOOL)updateSortMap;
-(long long)addStringToSortMap:(id)sortMap;
-(BOOL)isReadable;
-(BOOL)_mustProcessLanguageChange;
// declared property getter: -(BOOL)mediaRestrictionEnabled;
-(void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)only;
-(void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;
-(void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;
-(void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;
-(void)_delayableNotifyPost:(id)post localNotificationName:(id)name;
-(void)savePlaylistsSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;
-(void)savePlaylists;
-(void)saveTrackMetadataSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;
-(void)saveTrackMetadata;
// declared property getter: -(id)preferredSubtitleTracks;
// declared property getter: -(id)preferredAudioTracks;
// declared property getter: -(id)databaseInfo;
// declared property getter: -(id)purchasedTracksPlaylist;
-(void)notifyDisplayValuesPropertyDidChange;
-(void)notifyInvisiblePropertyDidChange;
-(void)notifyNonContentsPropertyDidChange;
-(void)notifyContentsDidChange;
-(unsigned)sectionIndexTitleIndexForSectionIndex:(unsigned)sectionIndex;
-(id)localizedSectionHeaderForSectionIndex:(unsigned)sectionIndex;
// declared property getter: -(id)localizedSectionIndexTitles;
-(void)performTransactionKind:(int)kind waitIfBusy:(BOOL)busy withBlock:(id)block;
-(void)performTransactionKind:(int)kind withBlock:(id)block;
-(void)performTransactionAllowingWrites:(BOOL)writes withBlock:(id)block;
-(void)performTransactionWithBlock:(id)block;
// declared property getter: -(BOOL)isNondurableWritingActive;
-(void)prepareStatementForSQL:(id)sql usingBlock:(id)block;
-(void)prepareStatementForSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;
-(void)statementWithSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;
-(void)statementWithSQL:(id)sql usingBlock:(id)block;
-(id)statementWithSQL:(id)sql;
-(BOOL)_writeImageBytes:(const void*)bytes length:(unsigned long)length formatID:(unsigned)anId cacheID:(id)anId4;
-(BOOL)_writeCGImage:(CGImageRef)image length:(unsigned long)length forCacheID:(id)cacheID formatID:(unsigned)anId imageSubRect:(CGRect)rect;
-(BOOL)_drawAndWriteImage:(CGImageRef)image outputWidth:(unsigned long)width outputHeight:(unsigned long)height colorSpace:(CGColorSpaceRef)space cacheID:(id)anId formatID:(unsigned)anId6 artworkStyle:(XXStruct_$eUQoB*)style resultingImageSubRect:(CGRect*)rect resultingLength:(unsigned*)length;
-(BOOL)_runStatementWithSQL:(id)sql bindingValue:(id)value :(id)arg3;
-(BOOL)runStatementWithSQL:(id)sql bindingValue:(id)value;
-(long long)_int64ValueForFirstRowAndColumnWithSQL:(id)sql;
-(BOOL)deleteDatabase;
-(id)groupingKeysForStrings:(id)strings;
-(id)groupingKeyForString:(id)string;
-(void)accessSortKeyBuilder:(id)builder;
-(void)accessConnectionUsingBlock:(id)block;
-(void)accessDatabaseUsingBlock:(id)block;
-(void)reconnectToDatabaseWithCompletionHandler:(id)completionHandler;
-(void)reconnectToDatabase;
-(BOOL)populateStaticItemsOfDynamicContainers;
-(BOOL)executeSQL:(id)sql;
// declared property getter: -(BOOL)requiresPostProcessing;
// declared property getter: -(BOOL)requiresArtworkConversionPostProcessing;
-(id)newDatabaseConnection;
-(void)dealloc;
// converted property getter: -(id)geniusDatabase;
-(id)_newGeniusDBConnectionAtPath:(id)path;
// converted property getter: -(id)ubiquitousDatabase;
-(void)resetUbiquitousMetadata;
// declared property getter: -(BOOL)writable;
-(void)updateTrackIntegrity;
-(void)migratePresignedValidity;
-(BOOL)verifyPresignedValidity;
-(BOOL)hasPresignedValidity;
-(void)deletePresignedValidity;
-(void)_postLibraryNotification:(id)notification isSourceExternal:(BOOL)external userInfo:(id)info;
-(id)initWithPath:(id)path enableWrites:(BOOL)writes;
-(void)_enumerateDatabaseContextsUsingBlock:(id)block;
-(void)_accessDatabaseContextUsingBlock:(id)block;
-(void)_onMainQueuePerformDatabaseContextBlock:(id)block;
-(void)_onBackgroundQueuePerformDatabaseContextBlock:(id)block;
-(void)_atomicClearIsConvertingArtwork;
-(BOOL)_atomicTestAndSetIsConvertingArtworkWithCompletionHandler:(id)completionHandler;
-(void)statementWithSQLPrefix:(id)sqlprefix inPersistentIDs:(const long long*)persistentIDs count:(unsigned)count usingBlock:(id)block;
-(id)nondurableWriteSetForWriting;
-(id)nondurableWriteSetForReading;
-(id)artistForArtistName:(id)artistName seriesName:(id)name;
-(id)artistGroupingKeyForArtistName:(id)artistName seriesName:(id)name;
-(id)albumForAlbumArtistPersistentID:(long long)albumArtistPersistentID albumName:(id)name feedURL:(id)url seasonNumber:(id)number compilation:(BOOL)compilation;
-(id)genreForGenre:(id)genre;
-(id)composerForComposerName:(id)composerName;
-(id)albumArtistForEffectiveAlbumArtistName:(id)effectiveAlbumArtistName;
-(void)updateOrderingLanguagesForCurrentLanguage;
-(BOOL)updateActivePlaylistNamesForCurrentLanguage;
-(BOOL)handleArtworkConversion;
-(BOOL)handlePrepareDatabase;
-(BOOL)populateArtworkCacheWithArtworkData:(id)artworkData trackValues:(id)values;
-(BOOL)resetAllContents;
-(BOOL)removeLocationsForItemsMissingAssets;
-(long long)insertStringIntoSortMapNoTransaction:(id)transaction;
-(id)insertStringsIntoSortMap:(id)map;
-(id)_insertStringsIntoSortMapOrFail:(id)fail;
-(XXStruct_Cy4r_A)nameOrderForString:(id)string;
-(BOOL)coerceValidDatabase;
-(BOOL)deleteAndRecreateDatabaseUsingConnection:(id)connection;
-(BOOL)createIndexes;
-(BOOL)dropItemIndexes;
-(BOOL)buildDatabaseTables;
-(id)locationKindForKind:(id)kind;
-(BOOL)importTracksFromDataSource:(id)dataSource progressHandler:(id)handler;
-(BOOL)importTracksFromDataSource:(id)dataSource;
-(id)_existingAlbumStatesForGroupingIdentifiers:(id)groupingIdentifiers;
-(id)_existingCollectionPIDsForTable:(id)table groupingNames:(id)names groupingKeysForGroupingNames:(id)groupingNames;
-(void)_populateNameOrderForPID:(unordered_map<long long, ML3NameOrder, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, ML3NameOrder>>, false>*)pid table:(id)table nameSQL:(id)sql;
-(id)_insertIntoChapterUsingVtabSQL;
-(id)_replaceIntoPurgeableListUsingVtabSQL;
-(id)_insertIntoPurgeableListUsingVtabSQL;
-(id)_insertIntoItemSearchUsingVtabSQL;
-(id)_insertIntoItemStatsUsingVtabSQL;
-(id)_insertIntoItemExtraUsingVtabSQL;
-(id)_insertIntoItemUsingVtabSQL;
-(long long)_baseLocationPIDFromDataSource:(id)dataSource;
-(long long)_locationKindPIDFromDataSource:(id)dataSource;
-(long long)_composerPIDFromDataSource:(id)dataSource sortableNames:(id)names existingComposerPIDsForGroupingKeys:(id)groupingKeys insertIntoComposerStatement:(id)statement;
-(id)_insertIntoComposerStatement;
-(id)_composerGroupingNameFromDataSource:(id)dataSource;
-(long long)_genrePIDFromDataSource:(id)dataSource sortableNames:(id)names existingGenrePIDsForGroupingKeys:(id)groupingKeys insertIntoGenreStatement:(id)statement;
-(id)_insertIntoGenreStatement;
-(id)_genreGroupingNameFromDataSource:(id)dataSource;
-(long long)_albumPIDFromDataSource:(id)dataSource sortableNames:(id)names albumArtistPID:(long long)pid existingAlbumStatesForGroupingIdentifiers:(id)groupingIdentifiers insertIntoAlbumStatement:(id)statement groupingKeysForGroupingNames:(id)groupingNames;
-(id)_insertIntoAlbumStatement;
-(id)_albumGroupingIdentifierFromDataSource:(id)dataSource albumArtistPersistentID:(long long)anId groupingKeysForGroupingNames:(id)groupingNames;
-(long long)_albumArtistPIDFromDataSource:(id)dataSource sortableNames:(id)names existingAlbumArtistPIDsForGroupingKeys:(id)groupingKeys insertIntoAlbumArtistStatement:(id)statement;
-(id)_insertIntoAlbumArtistStatement;
-(id)_albumArtistGroupingNameFromDataSource:(id)dataSource;
-(long long)_artistPIDFromDataSource:(id)dataSource sortableNames:(id)names existingArtistPIDsForGroupingKeys:(id)groupingKeys insertIntoItemArtistStatement:(id)statement;
-(id)_insertIntoItemArtistStatement;
-(id)_artistGroupingNameFromDataSource:(id)dataSource;
@end

