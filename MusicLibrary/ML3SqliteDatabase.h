/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import </libobjc.A.h>

@class ML3SqliteDatabaseContext, MLSQLiteConnectionQueue, NSString;

__attribute__((visibility("hidden")))
@interface ML3SqliteDatabase : NSObject {
@private
	NSString* _identifier;
	ML3SqliteDatabaseContext* _mainDatabaseContext;
	ML3SqliteDatabaseContext* _backgroundDatabaseContext;
	MLSQLiteConnectionQueue* _backgroundConnectionQueue;
	NSString* _backgroundQueueIdentifier;
	NSString* _path;
	BOOL _enableWrites;
}
@property(readonly, assign, nonatomic) NSString* path;	// @synthesize=_path
+(BOOL)migrateToCurrentUserVersionUsingHandle:(sqlite3*)currentUserVersionUsingHandle;
+(BOOL)migrateFromVersion:(int)version outUserVersion:(int*)version2 usingHandle:(sqlite3*)handle;
+(BOOL)orderingLanguageMatchesSystemUsingHandle:(sqlite3*)handle;
+(BOOL)userVersionMatchesSystemUsingHandle:(sqlite3*)handle;
+(int)userVersionUsingHandle:(sqlite3*)handle;
+(BOOL)buildDatabaseTablesUsingHandle:(sqlite3*)handle usingTransaction:(BOOL)transaction;
+(int)currentUserVersion;
+(id)systemCurrentLanguage;
+(id)allSchemaSQL;
+(BOOL)executeSQL:(id)sql usingHandle:(sqlite3*)handle;
+(void)stepStatement:(sqlite3_stmt*)statement hasRow:(BOOL*)row didFinish:(BOOL*)finish;
+(BOOL)statementDidFinishAfterStepping:(sqlite3_stmt*)statement;
+(BOOL)statementHasRowAfterStepping:(sqlite3_stmt*)stepping;
+(void)closeDatabaseHandle:(sqlite3*)handle;
+(void)registerCustomCallbacksOnHandle:(sqlite3*)handle;
+(void)registerFunctionsOnHandle:(sqlite3*)handle;
+(void)limitCacheSize:(sqlite3*)size;
+(BOOL)attachAuxiliaryDatabases:(sqlite3*)databases;
+(id)databasePath;
// declared property getter: -(id)path;
-(void).cxx_destruct;
-(BOOL)coerceValidDatabase;
-(BOOL)deleteAndRecreateDatabaseUsingHandle:(sqlite3**)handle;
-(BOOL)buildDatabaseTables;
-(void)performTransactionWithBlock:(id)block;
-(void)didRollbackInDatabaseContext:(id)databaseContext;
-(void)didCommitInDatabaseContext:(id)databaseContext;
-(void)performOperationInBackground:(id)background;
-(void)prepareStatementForSQL:(id)sql usingBlock:(id)block;
-(void)accessDatabaseUsingBlock:(id)block;
-(void)accessDatabaseContextUsingBlock:(id)block;
-(void)reconnectToDatabaseWithCompletionHandler:(id)completionHandler;
-(void)_enumerateDatabaseContextsUsingBlock:(id)block;
-(void)_accessDatabaseContextUsingBlock:(id)block;
-(void)reconnectBackgroundDatabaseContext;
-(void)reconnectMainDatabaseContext;
-(id)_onMainQueueDatabaseContext;
-(id)_onBackgroundQueueDatabaseContext;
-(id)newDatabaseContext;
-(BOOL)executeSQL:(id)sql;
-(BOOL)requiresPostProcessing;
-(sqlite3*)openedDatabaseHandle;
-(BOOL)openDatabaseHandle:(sqlite3**)handle;
-(BOOL)_openDatabaseWithOpenHandler:(id)openHandler;
-(BOOL)canWriteToDatabase;
-(void)_debugLoggingOptionsDidChangeNotification:(id)_debugLoggingOptions;
-(void)dealloc;
-(id)description;
-(id)initWithIdentifier:(id)identifier path:(id)path backgroundConnectionQueue:(id)queue enableWrites:(BOOL)writes;
@end

