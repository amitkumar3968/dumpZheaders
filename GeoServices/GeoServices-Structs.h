/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

typedef struct _NSZone NSZone;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct _GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct {
	unsigned long long _high;
	unsigned long long _low;
} XXStruct_t9EeIA;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct _NSRange {
	unsigned _field1;
	unsigned _field2;
} NSRange;

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

template<>
struct __list_node<CacheItem, void *>;

template<>
struct __list_node_base<CacheItem, void *> {
	__list_node<CacheItem, void* >* __prev_;
	__list_node<CacheItem, void* >* __next_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *>> > {
	unsigned long __first_;
};

template<>
struct list<CacheItem, std::__1::allocator<CacheItem> > {
	__list_node_base<CacheItem, void *> __end_;
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *>> > __size_alloc_;
};

template<>
struct __hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>> > {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void* >>, void* >** __first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>> > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>> > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void* >>, void* >* __next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>> > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>> > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>> > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>> > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > __p3_;
};

template<>
struct unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>> > {
	__hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>> > __table_;
};

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct {
	unsigned _field1;
	double _field2;
} XXStruct_nbUehC;

typedef struct {
	double latitude;
	double longitude;
} XXStruct_zYrK5D;

typedef struct {
	XXStruct_zYrK5D _field1;
	XXStruct_zYrK5D _field2;
} XXStruct_03F4WD;

typedef struct {
	XXStruct_zYrK5D _field1;
	double _field2;
	double _field3;
} XXStruct_SnKRpD;

typedef struct {
	unsigned formattedAddressType : 1;
} XXStruct_ec15KC;

typedef struct {
	unsigned* list;
	unsigned count;
	unsigned size;
} XXStruct_stqouA;

typedef struct Longitude {
	unsigned _field1;
} Longitude;

typedef struct Latitude {
	unsigned _field1;
} Latitude;

typedef struct GeoCoordinates {
	Longitude _field1;
	Latitude _field2;
} GeoCoordinates;

typedef struct Angle {
	unsigned short _field1;
} Angle;

typedef struct FormOfWay {
	int _field1;
} FormOfWay;

typedef struct FunctionalClass {
	int _field1;
} FunctionalClass;

typedef struct ControlPoint {
	int _field1;
	GeoCoordinates _field2;
	Angle _field3;
	FormOfWay _field4;
	FunctionalClass _field5;
	int _field6;
} ControlPoint;

typedef struct {
	int _field1;
	unsigned _field2;
	unsigned _field3;
	int _field4;
	unsigned _field5;
	int _field6;
	struct {
		unsigned uID : 1;
		unsigned totalNumberOfPhotos : 1;
		unsigned version : 1;
		unsigned canBeCorrectedByBusinessOwner : 1;
		unsigned isClosed : 1;
		unsigned isUnverified : 1;
	} _field7;
} XXStruct_TrK5YA;

typedef struct {
	int _field1;
	int _field2;
	int _field3;
	struct {
		unsigned departureTime : 1;
		unsigned maxRouteCount : 1;
		unsigned timeSinceLastRerouteRequest : 1;
	} _field4;
} XXStruct_DtYHXC;

typedef struct {
	int* list;
	unsigned count;
	unsigned size;
} XXStruct_WmZAAA;

typedef struct {
	long long* list;
	unsigned count;
	unsigned size;
} XXStruct_19EQxD;

typedef struct CGImage* CGImageRef;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} XXStruct_1aFH4A;

typedef struct {
	unsigned supportedLanguagesVersion : 1;
	unsigned timeToLiveSeconds : 1;
} XXStruct_$8RKkA;

typedef struct {
	unsigned _field1;
	int _field2;
	XXStruct_$8RKkA _field3;
} XXStruct_2ta5gB;

typedef struct {
	int _field1;
	int _field2;
} XXStruct_K5nmsA;

typedef struct {
	double _x;
	double _y;
	int _z;
	XXStruct_ec15KC _has;
} XXStruct_jtcFHA;

typedef struct _CFURLRequest* CFURLRequestRef;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	struct {
		unsigned eastLng : 1;
		unsigned northLat : 1;
		unsigned southLat : 1;
		unsigned westLng : 1;
	} _field5;
} XXStruct_3azwpD;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	double _field1;
	unsigned _field2;
	XXStruct_$8RKkA _field3;
} XXStruct_2pGsiB;

typedef struct _CFURLConnection* CFURLConnectionRef;

typedef struct _CFURLResponse* CFURLResponseRef;

typedef struct __CFURLConnectionSession* CFURLConnectionSessionRef;

typedef struct {
	id _field1;
	char* _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned long long _field8;
	BOOL _field9;
	unsigned long long _field10;
	float _field11;
	id _field12;
	int _field13;
} XXStruct_1vGfDB;

typedef struct GEOFeatureShield {
	XXStruct_BdOxqA _field1;
	long long _field2;
} GEOFeatureShield;

typedef struct {
	XXStruct_1vGfDB _field1;
	unsigned _field2;
	unsigned _field3;
	int _field4;
	int _field5;
	unsigned _field6;
	unsigned _field7;
	struct {
		float _field1;
		float _field2;
		float _field3;
		float _field4;
	} _field8;
	GEOTileKey* _field9;
} XXStruct_IJc5WD;

typedef struct {
	float _field1;
	float _field2;
} XXStruct_4WiXgC;

typedef struct {
	XXStruct_IJc5WD _field1;
	XXStruct_4WiXgC _field2;
	BOOL _field3;
	unsigned _field4;
	unsigned _field5;
} XXStruct_5hFgMD;

typedef struct {
	XXStruct_IJc5WD _field1;
	unsigned _field2;
	BOOL _field3;
} XXStruct_nzTP9A;

typedef struct {
	XXStruct_1vGfDB _field1;
	char* _field2;
	unsigned _field3;
} XXStruct_5JvWtA;

typedef struct {
	XXStruct_1vGfDB _field1;
	XXStruct_4WiXgC _field2;
	unsigned char _field3;
	BOOL _field4;
	BOOL _field5;
} XXStruct_wFsE0D;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_qFPbxC;

typedef struct {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} XXStruct_uYp3tB;

typedef struct {
	GEOTileKey* _field1;
	unsigned _field2;
	NSRange* _field3;
	unsigned _field4;
} XXStruct__qQs$B;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	char* _field3;
} XXStruct_xKvFHA;

typedef struct {
	char* _field1;
	char* _field2;
	unsigned _field3;
} XXStruct_BdOxqA;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned char _field3;
} XXStruct_fJSKzC;

typedef struct {
	XXStruct_qFPbxC _field1;
	struct {
		unsigned _field1;
		int _field2;
		float _field3;
		BOOL _field4;
		BOOL _field5;
		BOOL _field6;
		BOOL _field7;
		BOOL _field8;
		struct {
			unsigned char _field1;
			unsigned short _field2;
		} _field9[16];
	} _field2;
} XXStruct_Jn2zBA;

typedef struct {
	GEOTileKey* _field1;
	unsigned _field2;
	unsigned short _field3;
	unsigned _field4;
	char* _field5;
	unsigned _field6;
	struct {
		unsigned _field1;
		bool _field2;
	} _field7;
} XXStruct_tf976D;

typedef struct {
	unsigned char _field1;
	struct {
		char* _field1;
		unsigned _field2;
		unsigned _field3;
	} _field2;
	bool _field3;
	char* _field4;
	unsigned _field5;
	unsigned _field6;
} XXStruct_g8x3EB;

template<>
struct __tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *>;

template<>
struct __tree_node_base<void *>;

template<>
struct __tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void* >* __left_;
};

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *>> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>> > {
	__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void* >* __begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *>> > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > __pair3_;
};

template<>
struct map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData>> > {
	__tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>> > __tree_;
};

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
} XXStruct_VrsxJB;

typedef struct EditionEntry EditionEntry;

template<>
struct __compressed_pair<EditionEntry *, std::__1::allocator<EditionEntry> > {
	EditionEntry* __first_;
};

template<>
struct vector<EditionEntry, std::__1::allocator<EditionEntry> > {
	EditionEntry* __begin_;
	EditionEntry* __end_;
	__compressed_pair<EditionEntry *, std::__1::allocator<EditionEntry> > __end_cap_;
};


