/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService
 */

#import "ApplePushService-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSData, NSArray, NSMutableDictionary, NSMutableArray, CUTWeakReference, NSObject;
@protocol OS_dispatch_source, OS_xpc_object, APSConnectionDelegate, OS_dispatch_queue;

@interface APSConnection : XXUnknownSuperclass {
	CUTWeakReference* _delegateReference;
	NSObject<OS_dispatch_queue>* _ivarQueue;
	NSString* _environmentName;
	NSData* _publicToken;
	unsigned _messageSize;
	NSString* _connectionPortName;
	unsigned _connectionPort;
	unsigned _connectionServerPort;
	CFMachPortRef _connectionSeverCFMachPort;
	NSArray* _enabledTopics;
	NSArray* _ignoredTopics;
	NSMutableDictionary* _subtopics;
	BOOL _enableCriticalReliability;
	BOOL _enableStatusNotifications;
	BOOL _isConnected;
	NSMutableDictionary* _idsToOutgoingMessages;
	unsigned _nextOutgoingMessageID;
	NSObject<OS_dispatch_queue>* _machQueue;
	NSObject<OS_dispatch_source>* _mach_source;
	NSObject<OS_xpc_object>* _connection;
	NSObject<OS_dispatch_queue>* _delegateQueue;
	BOOL _everHadDelegate;
	NSMutableArray* _queuedDelegateBlocks;
}
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* ivarQueue;	// @synthesize=_ivarQueue
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* delegateQueue;	// @synthesize=_delegateQueue
@property(assign, nonatomic) id<APSConnectionDelegate> delegate;
@property(assign, nonatomic) unsigned messageSize;
@property(readonly, assign, nonatomic) NSData* publicToken;
@property(readonly, assign) BOOL isConnected;	// converted property
+(void)notifySafeToSendFilter;
+(void)_setTokenState;
+(id)connectionsDebuggingState;
+(double)keepAliveIntervalForEnvironmentName:(id)environmentName;
+(void)requestCourierConnection;
+(void)_blockingXPCCallWithArgumentBlock:(id)argumentBlock resultHandler:(id)handler;
+(SecIdentity*)copyIdentity;
// declared property getter: -(id)ivarQueue;
// declared property getter: -(id)delegateQueue;
-(void)sendFakeMessage:(id)message;
-(void)cancelOutgoingMessage:(id)message;
-(void)sendOutgoingMessage:(id)message;
-(void)_sendOutgoingMessage:(id)message fake:(BOOL)fake;
-(BOOL)hasIdentity;
-(void)_deliverOutgoingMessageResultWithID:(unsigned)anId error:(id)error;
-(void)_deliverConnectionStatusChange:(BOOL)change;
-(void)_deliverPublicToken:(id)token;
-(void)_deliverPublicTokenOnIvarQueue:(id)queue;
-(void)_deliverMessage:(id)message;
-(void)_addEnableStatusNotificationsToXPCMessage:(id)xpcmessage;
-(void)_addEnableCriticalReliabilityToXPCMessage:(id)xpcmessage;
-(void)setEnableStatusNotifications:(BOOL)notifications;
-(void)_setEnableStatusNotifications:(BOOL)notifications sendToDaemon:(BOOL)daemon;
-(void)setEnableCriticalReliability:(BOOL)reliability;
-(void)_setEnableCriticalReliability:(BOOL)reliability sendToDaemon:(BOOL)daemon;
// converted property getter: -(BOOL)isConnected;
// declared property getter: -(unsigned)messageSize;
// declared property setter: -(void)setMessageSize:(unsigned)size;
// declared property getter: -(id)publicToken;
-(void)setSubtopic:(id)subtopic forEnabledTopic:(id)enabledTopic;
-(void)setIgnoredTopics:(id)topics;
-(void)_setIgnoredTopics:(id)topics sendToDaemon:(BOOL)daemon;
-(void)setEnabledTopics:(id)topics;
-(void)_setEnabledTopics:(id)topics sendToDaemon:(BOOL)daemon;
-(void)removeFromRunLoop;
-(void)scheduleInRunLoop:(id)runLoop;
-(void)_disconnectFromDealloc;
-(void)_disconnect;
-(void)_disconnectOnIvarQueue;
-(void)_cancelConnection;
-(void)_cancelConnectionOnIvarQueue;
-(void)_connectIfNecessary;
-(void)_connectIfNecessaryOnIvarQueue;
-(void)_callDelegateOnIvarQueueWithBlock:(id)block;
// declared property setter: -(void)setDelegate:(id)delegate;
// declared property getter: -(id)delegate;
-(void)dealloc;
-(id)initWithEnvironmentName:(id)environmentName namedDelegatePort:(id)port queue:(id)queue;
-(id)initWithEnvironmentName:(id)environmentName queue:(id)queue;
-(id)initWithEnvironmentName:(id)environmentName namedDelegatePort:(id)port;
-(id)initWithEnvironmentName:(id)environmentName;
@end

