/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore
 */

#import "IMSystemMonitorListener.h"
#import "IMConnectionMonitorDelegate.h"
#import "IMServiceSessionProtocol.h"
#import "IMDaemonCore-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSDictionary, NSArray, IMConnectionMonitor, NSRecursiveLock, NSMutableSet, IMTimer, NSTimer, IMSystemProxySettingsFetcher, IMDAccount, IMDService, NSMutableDictionary, NSString;

@interface IMDServiceSession : XXUnknownSuperclass <IMSystemMonitorListener, IMConnectionMonitorDelegate, IMServiceSessionProtocol> {
	NSRecursiveLock* _lock;
	IMDAccount* _account;
	NSString* _loginStatusMessage;
	NSMutableDictionary* _localProperties;
	NSMutableSet* _changedBuddies;
	NSMutableSet* _registeredChats;
	NSMutableDictionary* _groupChatIdentifierToChatRoomMap;
	NSMutableDictionary* _chatRoomToGroupChatIdentifierMap;
	NSMutableDictionary* _chatSuppressionFlagMap;
	NSMutableDictionary* _chatSuppressionTimerMap;
	NSMutableDictionary* _suppressedMessages;
	IMTimer* _messageRoutingTimer;
	NSTimer* _storageTimer;
	NSMutableSet* _messagesReceivedDuringStorage;
	IMConnectionMonitor* _connectionMonitor;
	NSTimer* _reconnectTimer;
	NSString* _loginID;
	NSString* _pwRequestID;
	IMSystemProxySettingsFetcher* _systemProxySettingsFetcher;
	int _buddyChangeLevel;
	unsigned _loginStatus;
	int _disconnectReason;
	BOOL _activated;
	BOOL _saveKeychainPassword;
	BOOL _awaitingDataContext;
	BOOL _shouldReconnect;
	BOOL _badPass;
	IMDService* _service;
	NSMutableDictionary* _buddies;
	NSString* _proxyHost;
	NSString* _proxyAccount;
	NSString* _proxyPassword;
	NSString* _password;
	NSString* _serverHost;
	int _proxyType;
	unsigned short _proxyPort;
	BOOL _useSSL;
	unsigned short _serverPort;
}
@property(readonly, assign, nonatomic) NSString* serviceLoginStatusMessage;	// @synthesize=_loginStatusMessage
@property(readonly, assign, nonatomic) int serviceDisconnectReason;	// @synthesize=_disconnectReason
@property(readonly, assign, nonatomic) unsigned serviceLoginStatus;	// @synthesize=_loginStatus
@property(readonly, assign, nonatomic) BOOL networkConditionsAllowLogin;
@property(readonly, assign, nonatomic) BOOL allowedAsChild;
@property(readonly, assign, nonatomic) BOOL accountShouldBeAlwaysLoggedIn;
@property(readonly, assign, nonatomic) BOOL accountNeedsPassword;
@property(readonly, assign, nonatomic) BOOL accountNeedsLogin;
@property(readonly, assign, nonatomic) NSString* displayName;
@property(readonly, assign, nonatomic) BOOL isActive;
@property(readonly, assign, nonatomic) BOOL useSSL;	// @synthesize=_useSSL
@property(readonly, assign, nonatomic) NSString* proxyPassword;	// @synthesize=_proxyPassword
@property(readonly, assign, nonatomic) NSString* proxyAccount;	// @synthesize=_proxyAccount
@property(readonly, assign, nonatomic) unsigned short proxyPort;	// @synthesize=_proxyPort
@property(readonly, assign, nonatomic) NSString* proxyHost;	// @synthesize=_proxyHost
@property(readonly, assign, nonatomic) int proxyType;	// @synthesize=_proxyType
@property(readonly, assign, nonatomic) unsigned short serverPort;	// @synthesize=_serverPort
@property(readonly, assign, nonatomic) NSString* serverHost;	// @synthesize=_serverHost
@property(readonly, assign, nonatomic) NSDictionary* accountDefaults;
@property(readonly, assign, nonatomic) NSString* password;	// @synthesize=_password
@property(readonly, assign, nonatomic) NSString* accountID;
@property(readonly, assign, nonatomic) IMDService* service;	// @synthesize=_service
@property(readonly, assign, nonatomic) IMDAccount* account;	// @synthesize=_account
@property(readonly, assign, nonatomic) NSDictionary* registrationAlertInfo;
@property(readonly, assign, nonatomic) int registrationError;
@property(readonly, assign, nonatomic) int registrationStatus;
@property(readonly, assign, nonatomic) NSDictionary* buddyPictures;
@property(readonly, assign) NSDictionary* buddyProperties;
@property(readonly, assign, nonatomic) NSArray* allBuddies;
@property(assign) BOOL blockIdleStatus;	// converted property
@property(retain) id blockList;	// converted property
@property(retain) id allowList;	// converted property
@property(assign) unsigned blockingMode;	// converted property
@property(readonly, retain) NSString* loginID;	// converted property
+(id)_firewallUserNotificationForService:(id)service;
+(void)initialize;
// declared property getter: -(int)serviceDisconnectReason;
// declared property getter: -(unsigned)serviceLoginStatus;
// declared property getter: -(id)serviceLoginStatusMessage;
// declared property getter: -(id)service;
// declared property getter: -(id)account;
// declared property getter: -(id)password;
// declared property getter: -(BOOL)useSSL;
// declared property getter: -(id)proxyPassword;
// declared property getter: -(id)proxyAccount;
// declared property getter: -(unsigned short)proxyPort;
// declared property getter: -(id)proxyHost;
// declared property getter: -(int)proxyType;
// declared property getter: -(unsigned short)serverPort;
// declared property getter: -(id)serverHost;
-(void)_clearDowngradeMarkersForChat:(id)chat;
-(void)systemDidUnlock;
-(id)broadcasterForListenersWithCapabilities:(unsigned)capabilities;
-(id)broadcasterForVCConferenceListeners;
-(id)broadcasterForAVConferenceListeners;
-(id)broadcasterForChatListeners;
-(id)broadcaster;
-(void)refreshServiceCapabilities;
-(BOOL)equalID:(id)anId andID:(id)anId2;
-(id)canonicalFormOfChatRoom:(id)chatRoom;
-(id)canonicalFormOfID:(id)anId;
-(void)_managedPrefsNotification:(id)notification;
// declared property getter: -(BOOL)allowedAsChild;
// declared property getter: -(BOOL)networkConditionsAllowLogin;
-(void)_networkChanged:(id)changed;
-(void)connectionMonitorDidUpdate:(id)connectionMonitor;
-(void)_setPendingConnectionMonitorUpdate;
-(void)_processConnectionMonitorUpdate;
-(void)_reconnectIfNecessary;
-(void)_updateConnectionMonitorFromAccountDefaultsIgnoringProxy:(BOOL)accountDefaultsIgnoringProxy;
-(void)updateConnectionMonitorWithLocalSocketAddress:(id)localSocketAddress remoteSocketAddress:(id)address;
-(void)_updateConnectionMonitorWithRemoteHost:(id)remoteHost;
-(void)_clearConnectionMonitor;
-(void)sessionWillBecomeInactive;
-(void)sessionDidBecomeActive;
// declared property getter: -(id)accountDefaults;
// declared property getter: -(id)displayName;
// declared property getter: -(id)accountID;
// declared property getter: -(BOOL)isActive;
// declared property getter: -(BOOL)accountShouldBeAlwaysLoggedIn;
// declared property getter: -(BOOL)accountNeedsPassword;
// declared property getter: -(BOOL)accountNeedsLogin;
-(void)dealloc;
-(id)initWithAccount:(id)account service:(id)service;
-(void)noteLastItemFromStorage:(id)storage;
-(void)noteItemFromStorage:(id)storage;
-(void)noteSuppressedMessageUpdate:(id)update;
-(BOOL)isAwaitingStorageTimer;
-(void)_storageTimerFired;
-(void)_updateStorageTimerWithInterval:(double)interval;
-(void)_routingTimerFired;
-(void)_updateRoutingTimerWithInterval:(double)interval;
-(void)_updateRoutingForMessageGUID:(id)messageGUID chatGUID:(id)guid error:(unsigned)error;
-(void)_handleRoutingWithDictionary:(id)dictionary;
-(void)_markChatAsDowngraded:(id)downgraded;
-(BOOL)canMakeDowngradeRoutingChecks;
-(void)didChangeMemberStatus:(int)status forHandle:(id)handle unformattedNumber:(id)number countryCode:(id)code forChat:(id)chat style:(unsigned char)style;
-(void)didChangeMemberStatus:(int)status forHandle:(id)handle forChat:(id)chat style:(unsigned char)style;
-(void)didUpdateChatStatus:(int)status chat:(id)chat style:(unsigned char)style handleInfo:(id)info;
-(void)didUpdateChatStatus:(int)status chat:(id)chat style:(unsigned char)style;
-(void)didReceiveInvitation:(id)invitation forChat:(id)chat style:(unsigned char)style;
-(void)didReceiveMessage:(id)message forChat:(id)chat style:(unsigned char)style;
-(void)_setSuppressedMessage:(id)message inChatWithGUID:(id)guid;
-(void)_suppresionTimerFired:(id)fired;
-(void)_endMessageSuppressionForChatGUID:(id)chatGUID;
-(void)endMessageSuppression;
-(void)noteMessagesMarkedAsReadForChatWithGUID:(id)guid;
-(void)notifyDidSendMessageID:(id)notify;
-(void)didSendMessage:(id)message forChat:(id)chat style:(unsigned char)style;
-(void)didReceiveMessageReadReceiptForMessageID:(id)messageID date:(id)date completionBlock:(id)block;
-(void)_didReceiveMessageReadReceiptForMessageID:(id)messageID date:(id)date attempts:(int)attempts completionBlock:(id)block;
-(void)didReceiveMessageReadForMessageID:(id)messageID date:(id)date completionBlock:(id)block;
-(void)_didReceiveMessageReadForMessageID:(id)messageID date:(id)date attempts:(int)attempts completionBlock:(id)block;
-(void)didReceiveMessageDeliveryReceiptForMessageID:(id)messageID date:(id)date;
-(void)didSendMessageReadReceiptForMessageID:(id)messageID;
-(void)didReceiveError:(unsigned)error forMessageID:(id)messageID forceError:(BOOL)error3;
-(void)didReceiveErrorMessage:(id)message forChat:(id)chat style:(unsigned char)style;
-(void)didReceiveReplaceMessageID:(int)anId forChat:(id)chat style:(unsigned char)style;
-(void)didJoinChat:(id)chat style:(unsigned char)style handleInfo:(id)info;
-(void)didJoinChat:(id)chat style:(unsigned char)style;
-(void)didLeaveChat:(id)chat style:(unsigned char)style;
-(void)leaveAllChats;
-(void)sendReadReceiptForMessage:(id)message toChatID:(id)chatID identifier:(id)identifier style:(unsigned char)style;
-(void)sendMessage:(id)message toChat:(id)chat style:(unsigned char)style;
-(void)processMessageForSending:(id)sending toChat:(id)chat style:(unsigned char)style completionBlock:(id)block;
-(id)chatForChatIdentifier:(id)chatIdentifier style:(unsigned char)style;
-(void)_mapRoomChatToGroupChat:(id*)groupChat style:(char*)style;
-(void)canonicalizeChatIdentifier:(id*)identifier style:(char*)style;
-(void)unregisterChat:(id)chat style:(unsigned char)style;
-(BOOL)isChatRegistered:(id)registered style:(unsigned char)style;
-(void)registerChat:(id)chat style:(unsigned char)style handleInfo:(id)info;
-(void)registerChat:(id)chat style:(unsigned char)style;
-(id)_newHashForChat:(id)chat style:(unsigned char)style;
-(id)chatRoomForGroupChatIdentifier:(id)groupChatIdentifier;
-(id)groupChatIdentifierForChatRoom:(id)chatRoom;
-(void)useChatRoom:(id)room forGroupChatIdentifier:(id)groupChatIdentifier;
-(void)changeLocalProperty:(id)property ofBuddy:(id)buddy to:(id)to;
-(id)localPropertiesOfBuddy:(id)buddy;
-(void)clearLocalProperties;
-(id)localProperty:(id)property ofBuddy:(id)buddy;
-(id)property:(id)property ofBuddy:(id)buddy;
-(void)endBuddyChanges;
-(void)clearPropertiesOfBuddy:(id)buddy;
-(void)changeProperty:(id)property ofBuddy:(id)buddy to:(id)to;
-(void)beginBuddyChanges;
-(void)markBuddiesAsChanged:(id)changed;
-(void)resumeBuddyUpdates;
-(void)holdBuddyUpdates;
// declared property getter: -(id)buddyProperties;
-(id)groups;
// declared property getter: -(id)allBuddies;
-(id)pictureKeyForBuddy:(id)buddy;
-(id)pictureOfBuddy:(id)buddy;
// declared property getter: -(id)buddyPictures;
-(void)setProperties:(id)properties ofParticipant:(id)participant inChatID:(id)chatID identifier:(id)identifier style:(unsigned char)style;
-(void)sendMessage:(id)message toChatID:(id)chatID identifier:(id)identifier style:(unsigned char)style;
-(void)declineInvitationToChatID:(id)chatID identifier:(id)identifier style:(unsigned char)style;
-(void)invitePersonInfo:(id)info withMessage:(id)message toChatID:(id)chatID identifier:(id)identifier style:(unsigned char)style;
-(void)leaveChatID:(id)anId identifier:(id)identifier style:(unsigned char)style;
-(void)joinChatID:(id)anId handleInfo:(id)info identifier:(id)identifier style:(unsigned char)style joinProperties:(id)properties;
-(void)updateAuthorizationCredentials:(id)credentials token:(id)token;
-(void)validateProfile;
-(void)refreshVettedAliases;
-(void)unvalidateAliases:(id)aliases;
-(void)validateAliases:(id)aliases;
-(void)removeAliases:(id)aliases;
-(void)addAliases:(id)aliases;
-(void)sendCommand:(id)command withProperties:(id)properties toPerson:(id)person;
-(void)sendData:(id)data toPerson:(id)person;
-(void)relay:(id)relay sendCancel:(id)cancel toPerson:(id)person;
-(void)relay:(id)relay sendUpdate:(id)update toPerson:(id)person;
-(void)relay:(id)relay sendInitateRequest:(id)request toPerson:(id)person;
-(void)sendAVMessageToPerson:(id)person sessionID:(unsigned)anId type:(unsigned)type userInfo:(id)info conference:(id)conference;
-(void)sendVCUpdate:(id)update toPerson:(id)person conference:(id)conference;
-(void)sendCounterProposalToPerson:(id)person properties:(id)properties conference:(id)conference;
-(void)cancelVCRequestWithPerson:(id)person properties:(id)properties conference:(id)conference;
-(void)respondToVCInvitationWithPerson:(id)person properties:(id)properties conference:(id)conference;
-(void)requestVCWithPerson:(id)person properties:(id)properties conference:(id)conference;
-(FZChatRoomValidity)validityOfChatRoomName:(id)chatRoomName;
-(void)sendFileTransfer:(id)transfer toPerson:(id)person;
-(void)setProperties:(id)properties ofParticipant:(id)participant inChat:(id)chat style:(unsigned char)style;
-(void)declineInvitationToChat:(id)chat style:(unsigned char)style;
-(void)invitePersonInfo:(id)info withMessage:(id)message toChat:(id)chat style:(unsigned char)style;
-(void)invitePerson:(id)person withMessage:(id)message toChat:(id)chat style:(unsigned char)style;
-(void)leaveChat:(id)chat style:(unsigned char)style;
-(void)joinChat:(id)chat handleInfo:(id)info style:(unsigned char)style joinProperties:(id)properties;
-(void)joinChat:(id)chat style:(unsigned char)style joinProperties:(id)properties;
-(BOOL)shouldImitateGroupChatUsingChatRooms;
-(id)defaultChatSuffix;
-(void)setValue:(id)value ofProperty:(id)property ofPerson:(id)person;
-(void)requestProperty:(id)property ofPerson:(id)person;
-(void)stopWatchingBuddy:(id)buddy;
-(void)startWatchingBuddy:(id)buddy;
-(void)requestSubscriptionTo:(id)to;
-(void)acceptSubscriptionRequest:(BOOL)request from:(id)from;
-(void)renameGroup:(id)group to:(id)to;
-(void)changeGroup:(id)group changes:(id)changes;
-(void)changeGroups:(id)groups;
-(void)requestGroups;
-(void)setIdleTime:(unsigned long)time;
-(void)changeMyStatus:(id)status changedKeys:(id)keys;
// converted property getter: -(BOOL)blockIdleStatus;
// converted property setter: -(void)setBlockIdleStatus:(BOOL)status;
// converted property getter: -(id)blockList;
// converted property setter: -(void)setBlockList:(id)list;
// converted property getter: -(id)allowList;
// converted property setter: -(void)setAllowList:(id)list;
// converted property getter: -(unsigned)blockingMode;
// converted property setter: -(void)setBlockingMode:(unsigned)mode;
-(unsigned long long)capabilities;
-(void)loginServiceSession;
-(void)passwordUpdated;
-(void)accountDefaultsChanged:(id)changed;
-(void)_abandonSystemProxySettingsFetcher;
-(void)_abandonPWFetcher;
-(void)noteBadPassword;
// converted property getter: -(id)loginID;
// declared property getter: -(id)registrationAlertInfo;
// declared property getter: -(int)registrationError;
// declared property getter: -(int)registrationStatus;
-(void)setRegistrationStatus:(int)status error:(int)error alertInfo:(id)info;
-(void)unregisterAccount;
-(void)registerAccount;
-(void)authenticateAccount;
-(id)server;
-(BOOL)hasCapability:(unsigned long long)capability;
-(void)userNotificationDidFinish:(id)userNotification;
-(void)_handleFirewallUserNotificationDidFinish:(id)_handleFirewallUserNotification;
-(BOOL)warnIfPortBlocked:(int)blocked forAction:(id)action;
-(void)_clearAutoReconnectTimer;
-(void)_autoReconnectTimer:(id)timer;
-(void)_setAutoReconnectTimer;
-(void)setLoginStatus:(unsigned)status message:(id)message reason:(int)reason properties:(id)properties;
-(void)_forceSetLoginStatus:(unsigned)status message:(id)message reason:(int)reason properties:(id)properties;
-(void)setLoginStatus:(unsigned)status message:(id)message;
-(void)_wentOffline;
-(void)serviceSessionDidLogoutWithMessage:(id)serviceSession reason:(int)reason properties:(id)properties;
-(void)serviceSessionDidLogout;
-(void)serviceSessionDidLogin;
-(void)logout;
-(void)logoutServiceSession;
-(void)login;
-(void)autoLogin;
-(void)systemProxySettingsFetcher:(id)fetcher retrievedAccount:(id)account password:(id)password;
-(void)systemProxySettingsFetcher:(id)fetcher retrievedHost:(id)host port:(unsigned short)port protocol:(int)protocol;
-(void)_login_checkUsernameAndPassword;
-(void)_login_usernameAndPasswordReady;
-(void)_data_connection_ready;
-(void)_login_serverSettingsReady;
-(void)_doLoginIgnoringProxy:(BOOL)proxy;
-(void)autoReconnect;
-(void)disallowReconnection;
@end

