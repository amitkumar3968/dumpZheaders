/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "Symbolication-Structs.h"

@class NSConditionLock, NSMutableArray, VMUTaskMemoryCache, NSString, VMUProcessDescription, NSMapTable;

@interface VMUSampler : XXUnknownSuperclass {
	int _pid;
	unsigned _task;
	BOOL _needTaskPortDealloc;
	BOOL _recordThreadStates;
	BOOL _taskIs64Bit;
	NSString* _processName;
	VMUProcessDescription* _processDescription;
	CSTypeRef _symbolicator;
	VMUTaskMemoryCache* _memCache;
	sampling_context_t* _samplingContext;
	unsigned _mainThread;
	NSMapTable* _lastThreadBacktraceMap;
	unsigned _numberOfCopiedBacktraces;
	unsigned* _previousThreadList;
	unsigned _previousThreadCount;
	unsigned _maxPreviousThreadCount;
	double _tbRate;
	double _tbInterval;
	NSConditionLock* _stateLock;
	double _interval;
	double _timeLimit;
	unsigned _sampleLimit;
	BOOL _sampling;
	unsigned _samplingThreadPort;
	unsigned _numberOfSamples;
	NSMutableArray* _samples;
	BOOL _stacksFixed;
	void* _cfi;
	id _delegate;
	double _timeSpentSamplingWithoutCFI;
	double _timeSpentSamplingWithCFI;
	BOOL _shouldOutputSignature;
	BOOL _showDispatchQueueNames;
}
@property(assign) id delegate;	// converted property
@property(assign) BOOL shouldOutputSignature;	// converted property
@property(assign) unsigned sampleLimit;	// converted property
@property(assign) double timeLimit;	// converted property
@property(assign) double samplingInterval;	// converted property
@property(readonly, assign) int pid;	// converted property
@property(readonly, assign) CSTypeRef symbolicator;	// converted property
@property(readonly, assign) unsigned mainThread;	// converted property
@property(readonly, retain) NSMutableArray* samples;	// converted property
+(id)sampleAllThreadsOfTask:(unsigned)task withSymbolicator:(id)symbolicator symbolicate:(BOOL)symbolicate;
+(id)sampleAllThreadsOfTask:(unsigned)task symbolicate:(BOOL)symbolicate;
+(id)sampleAllThreadsOfTask:(unsigned)task withSymbolicator:(id)symbolicator;
+(id)sampleAllThreadsOfTask:(unsigned)task;
+(id)sampleAllThreadsOfPID:(int)pid withSymbolicator:(id)symbolicator;
+(id)sampleAllThreadsOfPID:(int)pid;
+(void)initialize;
-(void)writeOutput:(id)output append:(BOOL)append;
-(id)createOutput;
-(id)stopSamplingAndReturnCallNode;
-(void)forceStop;
-(void)stopSampling;
-(void)sampleForDuration:(unsigned)duration interval:(unsigned)interval;
-(void)preloadSymbols;
// converted property getter: -(id)delegate;
// converted property setter: -(void)setDelegate:(id)delegate;
-(id)dispatchQueueNameForSerialNumber:(unsigned long long)serialNumber;
-(id)dispatchQueueNameForSerialNumber:(unsigned long long)serialNumber returnedConcurrentFlag:(BOOL*)flag returnedThreadId:(unsigned long long*)anId;
-(id)threadNameForThread:(unsigned)thread;
-(id)threadNameForThread:(unsigned)thread returnedThreadId:(unsigned long long*)anId returnedDispatchQueueSerialNum:(unsigned long long*)num;
// converted property getter: -(unsigned)mainThread;
-(void)flushData;
-(unsigned)sampleCount;
// converted property getter: -(id)samples;
// converted property getter: -(int)pid;
// converted property getter: -(CSTypeRef)symbolicator;
// converted property getter: -(BOOL)shouldOutputSignature;
// converted property setter: -(void)setShouldOutputSignature:(BOOL)outputSignature;
-(void)setRecordThreadStates:(BOOL)states;
// converted property getter: -(unsigned)sampleLimit;
// converted property setter: -(void)setSampleLimit:(unsigned)limit;
// converted property getter: -(double)timeLimit;
// converted property setter: -(void)setTimeLimit:(double)limit;
// converted property getter: -(double)samplingInterval;
// converted property setter: -(void)setSamplingInterval:(double)interval;
-(BOOL)waitUntilDone;
-(BOOL)stop;
-(BOOL)start;
-(id)sampleThread:(unsigned)thread;
-(id)sampleAllThreadsOnce;
-(void)_runSamplingThread;
-(void)_fixupStacks:(id)stacks;
-(unsigned)recordSampleTo:(id)to beginTime:(double)time endTime:(double)time3 thread:(unsigned)thread;
-(void)initializeSamplingContext:(BOOL)context;
-(void)_makeTimeshare;
-(void)_makeHighPriority;
-(void)finalize;
-(void)dealloc;
-(id)initWithTask:(unsigned)task options:(unsigned)options;
-(id)initWithPID:(int)pid options:(unsigned)options;
-(id)initWithTask:(unsigned)task;
-(id)initWithPID:(int)pid;
-(id)initWithPID:(int)pid orTask:(unsigned)task options:(unsigned)options;
@end

